/*
更新时间: 2021-02-25 00:30
Github Actions使用方法见[@lxk0301](https://raw.githubusercontent.com/lxk0301/scripts/master/githubAction.md) 使用方法大同小异

中青看点浏览赚任务，手动完成任务，获取请求体，支持boxjs及Github Actions，多请求用"&"分开，点击任务，支持自动获取请求

https:\/\/ios\.baertt\.com\/v5\/task\/browse_start\.json url script-request-body youth_gain.js

https:\/\/ios\.baertt\.com\/v5\/Nameless\/adlickstart\.json url script-request-body youth_gain.js


多个请求体时用'&'号或者换行隔开"，本脚本可自动删除失效请求，请须知 ‼️

*/


const $ = new Env("中青看点浏览赚&看看赚")
//const notify = $.isNode() ? require('./sendNotify') : '';
let startArr = [], lookArr=[];
let gainscore = 0, lookscore = 0;
let StartBody = [],LookBody = [];
let startbodys = $.getdata('youth_start');
let lookbodys = $.getdata('youth_look')

if (isGetCookie = typeof $request !==`undefined`) {
   GetCookie();
   $.done()
} 
if (!$.isNode() && !startbodys&&!lookbodys) {
  $.msg($.name, "您未获取任何请求，请先获取");
  return
} else if (!$.isNode() && !startbodys.indexOf("&") == -1) {
  startArr.push(startbodys)
} 
if (!$.isNode() && !lookbodys.indexOf("&") == -1) {
  lookArr.push(lookbodys)
} else {
  if (!$.isNode() && !startbodys.indexOf("&") > -1) {
    StartBody = startbodys.split('&');
  }
  if (!$.isNode() && !lookbodys.indexOf("&") > -1) {
    LookBody = lookbodys.split('&');
  }
  if ($.isNode()) {
    if (process.env.YOUTH_START && process.env.YOUTH_START.indexOf('&') > -1) {
      StartBody = process.env.YOUTH_START.split('&');
    } 
    if (process.env.YOUTH_LOOK && process.env.YOUTH_LOOK.indexOf('&') > -1) {
      LookBody = process.env.YOUTH_LOOK.split('&');
    } else {
      LookBody = [process.env.YOUTH_LOOK]
    }
  }
  Object.keys(StartBody).forEach((item) =>{
    if (StartBody[item]) {
      startArr.push(StartBody[item])
    }
  });
 Object.keys(LookBody).forEach((item) =>{
    if (LookBody[item]) {
      lookArr.push(LookBody[item])
    }
  })
}
lookArr=[
 'p=fUJybc31G2V0%3DUiVImOW0NxjDki1oppnnyi84FBOucMJcwuF22gs83ZSxtBb73TiU-SZMdl0t34pQYf6gjuYQTS0tEhiiwSIlk5fLGpUBDXtIU9C732OUg6KNTDYJJgRj0Im1a3gzqL6eQRqjeyHaLK5dTXwUxRRFf3bqRTs5tcgt2bVDH7Axbv5_NydB9m4X1Jex9DkLgG4ZS_JgCfrNjZkVTmOQLLPeXDtc8_RM7oehUZPtXD7lftWnO_6fdpCG-JQb963eP8jd2loKLhkzCw90ah6wlhVHt2q0iLLkNqbt7cDc7f_IduY29k1jCLH5XQ0YcGq3I8x4-3bzEeQnPdNYh7HxsBM5S_9XDQ74z2NC_2smLbaclhd4ZzI3V0BeKUMLoiWKOJbEcIbooBUNeDIO-h_le9pn57M81_PuTZbTzkPwcry1fnpU1qs1d74GrwewyXvWchC6ktZ0eJjSRjCu5QJpfckA51Uw8mqfAMkPEQuJI9CzZx753Qfqbyu4D-HdsMEvk8bQPfF6K7WEb7SKwPL6tfFoRDlBg46RNGvIwzAvgUdqFepiHJT1v5THcRwl60r25e86okk8na8dq_WqlUebWMDiKMzWMG0NhuvU9vCdkx8hLxxgCkRqoif1DFCospUq3BJsX5LRevsNpLDW9Lq5p-3D8wUYlZQEY-tE2ukj9v7ZPkS0TgRUJWQsdLj9AOcOyCYz1XXRJFsXV1wIb9xBTtT45XARBNQRgyUXFLYNhab5ZZ0XTU2dtq2rF7l2G9N4FJLWZtqtfhhM2FJunmIbZzrBDXYh8CQsyGAzG6AAtI-YkoSAKuXke8AQojRuMvSOmqFFK08tGSdjKMk8iLxY3Wr3dwr93kgIDjb2EX6_8zRZEDEIRdg3YfzGJHT43uaPaOszyZDexvIcdvShIyFFVP5MQ4cgvFjYF9qKCSg-e4N97cTcLZT72cqpWRmROzL0q30QIUtdXSHTHlwHa1JBZ7SCffjeLKyjEk4PHDBufy5dagqiO9edKqeyqBjYRmXTIuqklKF9ozMkE9v-RI5aX3IRc81gwwnJq2aB_DWShKb9_SEK0eoMMNaiyTC6lCOAkWI37SkRUp0jO55PzsmnVPazHBZGn7WWK7Q0zsJ05OSzqmX7EBdySsda8RVXAF15eP_rldtZech5alvMist_jUKVCS4lkRhjlOYpMNJWT3AdgimG2rXwppdQ7Adjaq5zh6TcTWx_km8ycQOKmmokeVHD-3asrFtfoWqK5f',
'p=TXU6PBNNsHKc%3DVtos3hc8_wV0Wpx7jOCVhRUyOmJPCLrGy3L9O4-iQR_RXaPVNJjDXHpmZy_JBPrI0Kx5J7uWvjt6wuaY70wKiRyiMS0VIrwqzDIL-1w1ybKFYF56RVtQBdxQRfOItKw8MECJISo9GERuQIPgHRH9r4Z47521wBDkvTj_F9_ADCPRYR21E_MBQdReEwfoJjoUVzjD-01IoQZ7HB-q6oN0ll6Zb_ZV8ivRV9xK77Ij1xltil7dFtG6jV2ptA9VfChF69rXBn26EbiShrHbO5YtPiqVhRYrF6K1DY5YA605xC4d6J_LwIs_UYZjO4MNDQMzwVomz65yrTXHaphfr9tqX-WAlbghvkQLkfhys9eMFwZ7KpBFoHM5SgRWcQ2sJXhn0yyZJBW4YJG_ViukOmE5dVYH8kiHSoKEovF6XQhawQD7Q_oo0c_g-TznoxiJ7l1Xw0dG_r47poEqrdVfithLvWCubPoVokL07aKNTqbhJP-WXXHyHXqjgEa_pXati0mqkhIs2g_9Ck7gcgQQ02L33L4p-dx5w1bSiHLaj8jjHjj9qnBUOC8XVCb_MTqNQXkYI0aaxKE2wFpDJwzIf9OCKcugyAotgwKaElJ8E0AuFGS-NVGe4v3YdWqUVONyEkIju7EIWYePqxnKcLOLFl8As-Vptz28l5zH4UBis5AdMMfNmQLd2dPb1g3ul0YMHsG-K1vtNeOqWBSw_3sroZnlh7a67OfyZ1aeP-1xRLvVvZPI9RbayhDc-hBiwqwpblKnywCHlO3PSqeZpi9cyd9mnRx73f1E-B_Hlr4qdoc-xO_-yUeggcYeZ1Btw5yb0HgywNFPUlKZPEwDQwKcw7Wl8mmkFL2kKfj2C7oH14iCFE7WKo8-oRstTONPE8zsD9O5quw-qwZksKO6IwZGkQbHrNVMbOMCOhDjLiMuVxp_RXprlPAp1KWcN7G1v7TePMgUPkVtqb0htloev_LCMqclJRsb2qchOzcUkJeldyWySZfnh0r9xrmZ6mMCSDwxSudHOhZLNXizE-WNRAVTeBA3t_j76bA1rxx66lDYcxx0Z3pqpUwwHKONwiFd7TnPXsAHxt4fChKT9a5j9iFk8v5r07heHblXfMHNdjQ8s6bG1bnmw_4HdlDpQVLiGFGV1wYeui1AuHLtWHl7fsFByOOF1FvQPWwD-hxFrDF0nQSQd8VLt02yuHLPCWJsq9OOvj217BbnfbYV0O4Q3HeCQ1rl41XbsA4uSJ94e',
'p=gXPkPrW1Kghg%3DEfRWZwWkN8iLhNZ7k5Ca7ci8hweqyV6tHuIcGkoUdzWtezcMzs7dNBvHGsgcjQLIsCKmRVi4HOxYRg8sc6Fft6Y8ilopNlwLG2FlU3NI-qboIGMLuZ_-N75rE1q-o0VGXEbz-MZv0IHoyRQv_TueZ__7T_OiQggVcJQlN8HoJN5ia7DlYDRgR77h_YOEs_daM5r9fB9s5G0KA3UtIJHU_3zWhNcxXrkfaqlNnk7jR7-n2BG7hvWXuoDzbz2Gq4Y0c4Hrzz3TPTojJ5R4aXRn4xWfZ-0MY4h9vx67Aq9UCFNbDySWGIPhcIcNxzZa8wvo5hJXsyWE71bDwEGr82vf1MSwj22SaN68X3yR5qBDUKvYKxaobWDH3KfcT5W7faAj4ObZ004TI9XoVff5JRpyBBZV6V6u35KknKr0FNgKopgjfa-FLXRs5msmmr333RbOz5lLo1c94p4NNc2LGRcF7TDxSdtSkGbBd3z4LRqtudi1BSjDwmJGPWyKNkd7hPyhbXPuc6cAhzWg37djUhP10hcfd6ZKzvDsK_aFNKzIVNkkjDH8GkFEQlAUVhkKlnCQUa_NcQ1KFLMqrHOhYOQVX4NOf5VS77pmUz48qVAiVnvMPgjOdxrJKzuNGvfaRKfdjNPcoqDzrMIBz0NllQ9-w6q70XgcVR1EXHZ1MwIblzboIztWtGNTM9J6Ibl9-YE6ey1V6yxth6Re9sD02qjMyOX0HIQ7VkAyO06c23XIizlQ1crFFvIqXLuyA39fAh7EHHP0jsPhcoYe9QRfarqmqSvtpZOO7efoz1FaWEDjYtzxQpdBURE4wb1wx2mwFXomvd3gX-PqxE9yaPK-8gj-sTSvehFeJT_Tx_PprO6A3pGmrvqU8Mmksb24SVhVEkdf3j4fovTAxYHO04krygcRaTS8IaWHMNdU3PIertTmIqijWOkOXzip4BWZL0vM0acZpGUcHaojHXWWcWJzbbt9eUP7zhWB_rm9xOmrf38R_U9OtzBXtUTauAcDIMWiK9FGEWGpcj414Xtp9BAuXEr5rv0hIRF-vGWeBvGdpBWwWpYvP_iVEDKEdkUQPso1VdbkltKdbZCDfxBFwPvPeDkltpazqjwOwvDZP2EXs_W3VN0IZCq1X8mVf3_WBBBpD8r3sGUp4Mp8jCNEIKLpREUnmK7njscTVGeNC8VO4WEIFt18hXWXKPbbGdjHgShNnmBxzkSGVvQAqzmvU9kcjvtBjfIQA-3pu_g8',
'p=uFbVGOYyXwIo%3DPsKtOYIB3Rf3xetWO7o2HOEZbrzIf5U8c9qn2Doa7KzbAWWE5xEpKLyny3wWxV4MhahlJF3O8Gh18lja73zSfD4M0IHaIiU6LeshSxIBV9dKPBxXkKccrGrok01n4iSCvkvAsLybxtcW4CJ8jH5W4W6rkl6W5yppnhziu62vCnT7SVDXcZq88DoSIPuVCxu5EMTsCwJgKTc1JnDFTFWQxTYB2Ww6FOOkuORVewl_LTtvGR2_qcr_qEcKf6JSZcDqQlOkHug7p2ASBUVGf3cfKo9DatxR83wyqZhFiedgSP7yj3xU1QcpDcf2AvWL5tI4jcnRoglKUStEKngh6B5vNZT8RRqf4IRkXFka-hFCu-kXunfRwtOJSqQbtsBQzgqdkq_2v2Z_TCW2DDkyq03HtMBmU7jJxBZuLpvb9mLB76wICIWXZAflxuTMLU2rJsg2TCYWP95LNhVHukaysYgT7c-7MiBAi3HrbJx38yutB7HWTa_b6_Gnv5zuwUU8i9BaT9XIVhmlrJg2kMjGmgu8ntsYtE9HpGQHAAXLvlMX_y3RNFAYahUaKQUNEpCCHkLT01GKMaxX733WFvy8Z0gHlMQuehmny8yuObeBWJjogjf9A4jJ1XwoqP0ZT-3HgZ5_GwjmVPXfoREu6PNfTXx4uMMErlkaVq9OFa1ljDh0dDY6cGZGhiwluFkJyOxuF4yT2tATW0U1L7ayMnJvB1--wVumZqDjaCjglKkyVXPTUSqhrCV8O6dujKxH9VxHCq3n3448jqAevT4S3X0wFoh1KFFdS_ZuSRS8XSmqUO_GFWfKJ4epdtKBAKTz-429mx76clp6629XGfb1aMPhFtH_lRN3dxbt5_Mf1KsKDRSe_XRx-lhq8IL2j3WtpLJ_xmCqIQviQ_0Xh30AVJO3Z-q20NIrW2_fcXz_sygNdoObfqvREArmgCHKoSRVSlAiTHcF-0xGiFxPaVWJpy2F3_7jCByrnBXKcz0ZgMQz-Hosp0iG7SvQTUs8MGlULWraUqbQsJFATXmM4mApIuC0fK2OC7ZDM4J3fQ22qOUyhSK4rcovV53h9lVNz65MSliHVt9f9lJh0NnMvMmINpO-xKlwdt8l33DfOji_WqH38VcdeC8giQspSpS5YbvPexB-JJWE4fBME4CJCeSJVTcoKKQaUKqOXkPvIy_t1939P_OiHVM1BcV53dBi-cuepyXZ7Rt8Ra_LQvgv_Knpxj9D8301T6wLIjbwoo7Cb',
'p=uFbVGOYyXwIo%3DPsKtOYIB3Rf3xetWO7o2HOEZbrzIf5U8c9qn2Doa7KzbAWWE5xEpKLyny3wWxV4MhahlJF3O8Gh18lja73zSfD4M0IHaIiU6LeshSxIBV9dKPBxXkKccrGrok01n4iSCvkvAsLybxtcW4CJ8jH5W4W6rkl6W5yppnhziu62vCnT7SVDXcZq88DoSIPuVCxu5EMTsCwJgKTc1JnDFTFWQxTYB2Ww6FOOkuORVewl_LTtvGR2_qcr_qEcKf6JSZcDqQlOkHug7p2ASBUVGf3cfKo9DatxR83wyqZhFiedgSP7yj3xU1QcpDcf2AvWL5tI4jcnRoglKUStEKngh6B5vNZT8RRqf4IRkXFka-hFCu-kXunfRwtOJSqQbtsBQzgqdkq_2v2Z_TCW2DDkyq03HtMBmU7jJxBZuLpvb9mLB76wICIWXZAflxuTMLU2rJsg2TCYWP95LNhVHukaysYgT7c-7MiBAi3HrbJx38yutB7HWTa_b6_Gnv5zuwUU8i9BaT9XIVhmlrJg2kMjGmgu8ntsYtE9HpGQHAAXLvlMX_y3RNFAYahUaKQUNEpCCHkLT01GKMaxX733WFvy8Z0gHlMQuehmny8yuObeBWJjogjf9A4jJ1XwoqP0ZT-3HgZ5_GwjmVPXfoREu6PNfTXx4uMMErlkaVq9OFa1ljDh0dDY6cGZGhiwluIhu6mjIvrrIpV-bzSgNu3J8QaYnq6WWN6yYGg10TczZirullERiXMLx2bSWRBYb3ys7jXreQlv93FdMXxp-W7Vq6wsGzPORrdY4inno5AljCHLOx476axb7qz4gzIjWDjJukP3OEA2y2fuUzo8Og9U20dO2BCmLro5fPp5pfOZ7GR7m3q0XOo55ozPsdpU_RbZYCeOa2dvpjduzf1hK1Xc0ZjvzU5EJAdGcjsI62dxDPKOwHcT1_8TIRIOn1apHCLi67P-9FWqsKJi8NvuJMeRIg8bbKpMYtCUQkfndZusotBAmkDvYD8LigUNRraFH5YMzyJmGOrc-SzRX0DVfP87YtGPad8pyjNKlIQ4EQqE02N7VgFgwC_LVErJ_DdveKBL9LRxAQUrdmT3nUKKbe3Kz5UxJ2orLGZNKRiFOQaUWLR9MfctZsXF8ZV9VyFTPSbFSrMJwJ5sGue0WcO8Y4t-5_IHtznsiK8Tvo0s0DkEjC3VUbSbLM7iM0q-Xw0UTQpEVrFWtbmJCwRa9liH8Zc6NXNsWBNWWK5XbT4sdIln6P',
'p=hXU6PBNNsHKc%3DVtos3hc8_wV0Wpx7jOCVhRUyOmJPCLrGy3L9O4-iQR_RXaPVNJjDXHpmZy_JBPrI0Kx5J7uWvjt6wuaY70wKiRyiMS0VIrwqzDIL-1w1ybKFYF56RVtQBdxQRfOItKw8MECJISo9GERuQIPgHRH9r4Z47521wBDkvTj_F9_ADCPRYR21E_MBQdReEwfoJjoUVzjD-01IoQZ7HB-q6oN0ll6Zb_ZV8ivRV9xK77Ij1xltil7dFtG6jV2ptA9VfChF69rXBn26EbiShrHbO5YtPiqVhRYrF6K1DY5YA605xC4d6J_LwIs_UYZjO4MNDQMzwVomz65yrTXHaphfr9tqX-WAlbghvkQLkfhys9eMFwZ7KpBFoHM5SgRWcQ2sJXhn0yyZJBW4YJG_ViukOmE5dVYH8kiHSoKEovF6XQhawQD7Q_oo0c_g-TznoxiJ7l1Xw0dG_r47poEqrdVfithLvWCubPoVokL07aKNTqbhJP-WXXHyHXqjgEa_pXati0mqkhIs2g_9Ck7gcgQQ02L33L4p-dx5w1bSiHLaj8jjHjj9qnBUOC8XVCb_MTqNQXkYI0aaxKE2wFpDJwzIf9OCKcugyAotgwKaElJ8E0AuFGS-NVGe4v3YdWqUVONyEkIju7EIWYePqxnKcLOLFl8As-Vptz28l5zH4UBis5AdMMfNmQLd2dPb1hgCJINMpJHxgzv_yGQzMy0zvVLID_AweIOxgek5xuKf01AizUlUOdsKuDQGjFlqILR490fmw3KSvgpDZrJETw33vpg5LWH9tECJR6zc2Q1OzyQghdVU2IIzfvgleKyYwjmDwBL4ZMt0IR9F_cqD1nGdFEf9_sizS5uQcshF6JOn0qvI7dferucG8UTavbEbzc6u-JmSu_c1I4MgLBFdHq7GK2wzfeSP5UV2m1f9mjoXcsSEuN8KpGL5PFDKz7mtdjpUAIerXzYMdtwksjxOHRcTGJ9nxuIUKNzAUoxaoLVvx1Vy8Y97elvnryrMTICyR8i8s49W-V7c9-YVc0z7khsGMUNqCVLyu4_ySsHsiWxVjxNlhzaoJdgTjV8DkYVv2kI0RM8cURLEHwXl9C22OkvFlD18XWnYXMaMYBO8bcctTQVU7I5kkhHYjW5qgRQbhRQUAKxYX1AKQaWtXrtqFR6SqeAmFv9lpb395B2JSM4NIR5pcKuXo6s3AfeSxwSrwSqCLckAf71UWwCbEZMLmW1MgkMowUdRZlc5Is95-LcLa',
'p=MFbVGOYyXwIo%3DPsKtOYIB3Rf3xetWO7o2HOEZbrzIf5U8c9qn2Doa7KzbAWWE5xEpKLyny3wWxV4MhahlJF3O8Gh18lja73zSfD4M0IHaIiU6LeshSxIBV9dKPBxXkKccrGrok01n4iSCvkvAsLybxtcW4CJ8jH5W4W6rkl6W5yppnhziu62vCnT7SVDXcZq88DoSIPuVCxu5EMTsCwJgKTc1JnDFTFWQxTYB2Ww6FOOkuORVewl_LTtvGR2_qcr_qEcKf6JSZcDqQlOkHug7p2ASBUVGf3cfKo9DatxR83wyqZhFiedgSP7yj3xU1QcpDcf2AvWL5tI4jcnRoglKUStEKngh6B5vNZT8RRqf4IRkXFka-hFCu-kXunfRwtOJSqQbtsBQzgqdkq_2v2Z_TCW2DDkyq03HtMBmU7jJxBZuLpvb9mLB76wICIWXZAflxuTMLU2rJsg2TCYWP95LNhVHukaysYgT7c-7MiBAi3HrbJx38yutB7HWTa_b6_Gnv5zuwUU8i9BaT9XIVhmlrJg2kMjGmgu8ntsYtE9HpGQHAAXLvlMX_y3RNFAYahUaKQUNEpCCHkLT01GKMaxX733WFvy8Z0gHlMQuehmny8yuObeBWJjogjf9A4jJ1XwoqP0ZT-3HgZ5_GwjmVPXfoREu6PNfTXx4uMMErlkaVq9OFa1ljDh0dDY6cGZGhiwluHnwi7RX8ftAUWKFEV7EakvGFIXWrDaZvYlEPT_ZTyz-GBggRbBtUCkMLrEf4Z_sI8tGOA5GS7jHGfUIE_F0qEg_YulBSplWZ-Q_gMokFH8H86pL0sjsty724Dh4RjAHJM_-JaXNxncICrdTnpsNVkcTNQkCDlB8FJ9ni8pJVtCGY04L19pI7m6RzhBk6aWem0aE6YsqVPF_2OS1XxhNunUb4_dvlOSzuFvkYmwsyaYoEBkAe1Vk0plDHHqjo6x9oAcmLBu7nwOqcsBzU0zLv1VsZOdlqE_pW5x9TzchZ3rT3UrWkHs33rqWaZY40gmVm8sviXgMb5qPVrlGF-CPzH3JeRXNzR6LZDjgxpoxC3D-mPvMG00X9lbCfbaDOYK4T-zC_NCwf3UdKCkc3uQx2CoL0vD8Ua0zQMi3uoZEdzup25tga-fqL-mmCGrshHDESvc7_nfKA7iV0FSs8vAqmFIImdSKfajZw1InWOlQ9f0ElBJ-hLaFgCtEBHpit0RHifodHbeMlABY2SNz3-OVcIxrS5_ZZhugTbyGMlVUADjxn',
'p=0YdVi_XPUOzA%3D7ioCfKCMWbKKlsCSXIKPzBHT6nVk1x_gLvUB_3C65XwFvBVgKzH8RoUjSSguFHNAmiC2QAQljju8dBUf4iokXgbEpeN1nFAxOjQvtA-TSfaNeWlsEQm25SGs-AR4EjDRkKLI0vuRl9afOO-LK01s89fgEyLazMy0ZJ7ETlHwXNIyYalGfIp9E9NY0qLLa4Ffiq5GWgS81-WJjA_4Jl06YRc_ufoaK5gauR0Lt_kcoAktOoVR3k3U9fY_-hWrRuefCb7Vp2zGxi1jZXOWUeZB1fBWQyQmhGLrM_DtvQeVq207JEpRfyxo7Ij-eHJ8MM9gAqr9cBrTVNqcIgHu09kyFHVxcWf1ID2FW4pDC_D4szub21ac6OoafIvNQ1vXCnKcLpXcFQ101sv-RysFIsR3eRPSLDiHtUlbMGan0wHNQGPoOjpDnDOFXaJxaiKO-Vl4wCV4eczCfyCaJiWfZBoT00uJaV50AE6oklj2W7cvzrWuhPzjxLzlr1k-vsfN_PRzYj2cIHesiJkOLVv7d9mS3ak4kYZm-rF6J_jMwahRP4nnWXhzMrf67Z4PHlNDRuQ8HnTHn8D_stIkLzM5_-XGdQvKLnQlBs6h3fgqVQZpMGBA7wJ_uQ05s3G_cFEnfgTcRcvPVvawenvzkraoSL0eummwBu38_uDezroQdnc9aqmPYTK4Z922-F1IC5OhPsn3cJNycobwVmmXFuIvTOBgK8aARGiZ-OzBuNPaWF-TpZ-FUs0dhMZHfeBMjtImBvBjnpnnH8lnIU9xZmV8D-ZxQ6E3himER_QKNuwgfpLIJxCXo8obijqBl9HEBhGza5C4SdXh3v7BfxnRgx9sYAYxcR6rJG0zD8W7H_qNT8qWBbO-jJo_ed1FjzGEVUQpwEwSIf5svLc77gVbzJVp_LbPU4RCfyH-jDRBfnxzj_GyHYdJN2awEGMPuvbGoWa7g8WeLoQeXP6JSfLmO8MIjsQjnBwPb3j8JnEe_kNy4sWOp86aWdtYgv68OMz6eQHCntUmVDIpsIGpRKm2nGA9LUiAoDauX-MGEwIY6h-U7Pp5H9VLOxPpa-sJzVt0wLTSUwosNtAE-DvvJ3Nqcif_MU2o7GOuyHaUx8jDIvJehQ_UXqxaGpfXsPmv97-UoSap6DmWQOwirh2ii5jadDDiAFOLjLTsprP3XkcYSM93x6XoZJl3hZrd5stKUT_DBViWgRTm5qG9UjWAYOqDjwbVGY3pUeFw8IhFDLIFMM',
'p=5XPkPrW1Kghg%3DEfRWZwWkN8iLhNZ7k5Ca7ci8hweqyV6tHuIcGkoUdzWtezcMzs7dNBvHGsgcjQLIsCKmRVi4HOxYRg8sc6Fft6Y8ilopNlwLG2FlU3NI-qboIGMLuZ_-N75rE1q-o0VGXEbz-MZv0IHoyRQv_TueZ__7T_OiQggVcJQlN8HoJN5ia7DlYDRgR77h_YOEs_daM5r9fB9s5G0KA3UtIJHU_3zWhNcxXrkfaqlNnk7jR7-n2BG7hvWXuoDzbz2Gq4Y0c4Hrzz3TPTojJ5R4aXRn4xWfZ-0MY4h9vx67Aq9UCFNbDySWGIPhcIcNxzZa8wvo5hJXsyWE71bDwEGr82vf1MSwj22SaN68X3yR5qBDUKvYKxaobWDH3KfcT5W7faAj4ObZ004TI9XoVff5JRpyBBZV6V6u35KknKr0FNgKopgjfa-FLXRs5msmmr333RbOz5lLo1c94p4NNc2LGRcF7TDxSdtSkGbBd3z4LRqtudi1BSjDwmJGPWyKNkd7hPyhbXPuc6cAhzWg37djUhP10hcfd6ZKzvDsK_aFNKzIVNkkjDH8GkFEQlAUVhkKlnCQUa_NcQ1KFLMqrHOhYOQVX4NOf5VS77pmUz48qVAiVnvMPgjOdxrJKzuNGvfaRKfdjNPcoqDzrMIBz0NllQ9-w6q70XgcVR1EXHZ1MwIblzboIztWtGNTM-OnENE8Fxt_PSXAQPrC35QS2tvGQmHPPa4I2ZU2UsIHq6ZGnl_6B-j03ietDNBWZ7H6gT8roXCrP3HbjBwMM1BrbRtqnLwSEIHmuZ6TJBVKxu98J5bXMQ6TAELQ8xY_VSqGNPSdfL7GNH4D8TSw2PvEfiJ1R2GZ2k6j2XzUUTOdLKWIeYVlCHyFvH6W1T27vVoPp5x_xnE5jjxbIqnwRwKkJqlbSSoafSmFkGGJ7AA_BQ4o9Zkw9GphlANn-EdnJg4dV_Nuzy2pmDlHc7C_fplLz424FyPp559CRoJcuuUYeXtWoACeYeX16gR8KqCZXIFY3qNWPT2c8YsjBJmtoM4e-reFtXCx0lV9JmWSV_EeRfNj6liaCqQPS_rGYR3_KnT3TBI0rSlPGn_tdtXYiQm5V7cp3oZ6v-QS9GFfyGMhFSftHKEzcFHvtFIV7NXr4FlqaUCOe4jLISivIsUBC2NvntpJ5uzAdno30RJ-t2sTskz-AvAppi2DxlvNwE7bwJrXiIUP9sdP-b-ivx6_EtOaMeUlgwVDB3jepJ8F05eq',
'p=rXU6PBNNsHKc%3DVtos3hc8_wV0Wpx7jOCVhRUyOmJPCLrGy3L9O4-iQR_RXaPVNJjDXHpmZy_JBPrI0Kx5J7uWvjt6wuaY70wKiRyiMS0VIrwqzDIL-1w1ybKFYF56RVtQBdxQRfOItKw8MECJISo9GERuQIPgHRH9r4Z47521wBDkvTj_F9_ADCPRYR21E_MBQdReEwfoJjoUVzjD-01IoQZ7HB-q6oN0ll6Zb_ZV8ivRV9xK77Ij1xltil7dFtG6jV2ptA9VfChF69rXBn26EbiShrHbO5YtPiqVhRYrF6K1DY5YA605xC4d6J_LwIs_UYZjO4MNDQMzwVomz65yrTXHaphfr9tqX-WAlbghvkQLkfhys9eMFwZ7KpBFoHM5SgRWcQ2sJXhn0yyZJBW4YJG_ViukOmE5dVYH8kiHSoKEovF6XQhawQD7Q_oo0c_g-TznoxiJ7l1Xw0dG_r47poEqrdVfithLvWCubPoVokL07aKNTqbhJP-WXXHyHXqjgEa_pXati0mqkhIs2g_9Ck7gcgQQ02L33L4p-dx5w1bSiHLaj8jjHjj9qnBUOC8XVCb_MTqNQXkYI0aaxKE2wFpDJwzIf9OCKcugyAotgwKaElJ8E0AuFGS-NVGe4v3YdWqUVONyEkIju7EIWYePqxnKcLOLFl8As-Vptz28l5zH4UBis5AdMMfNmQLd2dPb1u741CdHahYNXqh4xhFUQ7eVzuzbouNySs5EIO847HWp1F6l0FYa4pso67UdA3FPr_gv48FwzpkV4S3aJnh8fRwNA-iELIESiL6gaDiKJAOnSjLO-hjgwrm_OmT9ztKqGw-rMEMno11Un8cg-hgNz0I06oh8tiy41F4AT9kxbpJPTxIi6o_y2-_Hhmef6pcamOhcplnoomiwghMjyUpGVp-YhjcUgoDltX7umCcUDZCdydOzeI1oYPAI4LC77bHY3dY6-LyT2yKVRtfjdiTOx3PS-KPMBvNTaxyeAQHUoNam6xaHPdh4JmPgg1yy8kdP_ecHLgsD5oQ2zhVtLhCS6tj_0RLRr5WNzafi7jjzn0vNAenDGIgZYOPmhHNzzEkKaCj3prHAijxavZAcF0j18MJ3m0IS6APL1HGhavK_89gzHfkj5JdRTGwwfyrqgDjN1d16mAPMYah8UzwqdqmPK9VA3p87mmTYpWXf-e4r3y5VUNDmDoHS9_xm8pS4OTsfgv4r8Ih2jsnpvRr5STGPtjyW9M2mov25M1ZRlNJnIIre6',
'p=kFbVGOYyXwIo%3DPsKtOYIB3Rf3xetWO7o2HOEZbrzIf5U8c9qn2Doa7KzbAWWE5xEpKLyny3wWxV4MhahlJF3O8Gh18lja73zSfD4M0IHaIiU6LeshSxIBV9dKPBxXkKccrGrok01n4iSCvkvAsLybxtcW4CJ8jH5W4W6rkl6W5yppnhziu62vCnT7SVDXcZq88DoSIPuVCxu5EMTsCwJgKTc1JnDFTFWQxTYB2Ww6FOOkuORVewl_LTtvGR2_qcr_qEcKf6JSZcDqQlOkHug7p2ASBUVGf3cfKo9DatxR83wyqZhFiedgSP7yj3xU1QcpDcf2AvWL5tI4jcnRoglKUStEKngh6B5vNZT8RRqf4IRkXFka-hFCu-kXunfRwtOJSqQbtsBQzgqdkq_2v2Z_TCW2DDkyq03HtMBmU7jJxBZuLpvb9mLB76wICIWXZAflxuTMLU2rJsg2TCYWP95LNhVHukaysYgT7c-7MiBAi3HrbJx38yutB7HWTa_b6_Gnv5zuwUU8i9BaT9XIVhmlrJg2kMjGmgu8ntsYtE9HpGQHAAXLvlMX_y3RNFAYahUaKQUNEpCCHkLT01GKMaxX733WFvy8Z0gHlMQuehmny8yuObeBWJjogjf9A4jJ1XwoqP0ZT-3HgZ5_GwjmVPXfoREu6PNfTXx4uMMErlkaVq9OFa1ljDh0dDZ77HrDe5kW2QIHD4NjvocLVJ8Ibu5syn1h2fvK0f0APSKh-RxS2vvotBHHXN_AvedtrGOyB3GyvzvCUQMfdf_UkY54B8NI8REM3G8tvkPpi0YJC5aOxQKsqzdA_ZkrihmylQrL3mMkZHohMrPYV7aUubf1U6-N2C7XQTs82yzBK0yiPmeogTBwkBlYaLdWqKUHA1hA3l5830QAjqeKW-2MGLIpggDlZW64tXwiIuKrbcMfftNL-dQt-HjMVQaegm7ynTYH381P4T4hflvEk1FpVs7BTjOGKwVRwOaZKTgKz8k8DPWPuQXKw2R4N0tozh5_IYgOP61TtUn3ivl7-4BYajSFTi3X9pqy13u2_HPdQEtbfjtSfsT39-TCdu0qmHB5YxuvTldp6LZXuZ7g06o1O1gTcZkwep2ZmtvQM1t0qDl5yDW2nRU5lPjlnmchiFZmVvT3ki95A7sFTMkQfx6u3LHshc3ZVW_3HgdnHf9o7m6MRt6iLJhmcX9yztDURkXJrbkXo2wAXAe2nXaMTNfFB57ND0oCfsYfRLBDYpsrNzVqSP7vvVYSM',
'p=0YdVi_XPUOzA%3D7ioCfKCMWbKKlsCSXIKPzBHT6nVk1x_gLvUB_3C65XwFvBVgKzH8RoUjSSguFHNAmiC2QAQljju8dBUf4iokXgbEpeN1nFAxOjQvtA-TSfaNeWlsEQm25SGs-AR4EjDRkKLI0vuRl9afOO-LK01s89fgEyLazMy0ZJ7ETlHwXNIyYalGfIp9E9NY0qLLa4Ffiq5GWgS81-WJjA_4Jl06YRc_ufoaK5gauR0Lt_kcoAktOoVR3k3U9fY_-hWrRuefCb7Vp2zGxi1jZXOWUeZB1fBWQyQmhGLrM_DtvQeVq207JEpRfyxo7Ij-eHJ8MM9gAqr9cBrTVNqcIgHu09kyFHVxcWf1ID2FW4pDC_D4szub21ac6OoafIvNQ1vXCnKcLpXcFQ101sv-RysFIsR3eRPSLDiHtUlbMGan0wHNQGPoOjpDnDOFXaJxaiKO-Vl4wCV4eczCfyCaJiWfZBoT00uJaV50AE6oklj2W7cvzrWuhPzjxLzlr1k-vsfN_PRzYj2cIHesiJkOLVv7d9mS3ak4kYZm-rF6J_jMwahRP4nnWXhzMrf67Z4PHlNDRuQ8HnTHn8D_stIkLzM5_-XGdQvKLnQlBs6h3fgqVQZpMGBA7wJ_uQ05s3G_cFEnfgTcRcvPVvawenvzkraoSL0eummwBu38_uDezroQdnc9aqmPYTK4Z922-GbMl5ueyih7yOCqGRqkweyf3bWBwNROGxdPGlihIjP5xGupyPpEyaD53l6tzka1OrwKQ6LS6zOsqJax7jpKc4uxPulJpdFeB4HfJ9HsOJ9wmETIh9fuRpsb8wBVQlQ9iQLUCXzK6E2s-BPfCmT7lCSqdLzPhfsIo4yRz7guDjXjn4BSUvbUBvBZzF1rSm9S7eezJPBm03PPLjFq-rroBMWOLI68-h-BQwDEvw9PI-eCSMfgkPygrBOVr1nQkYCA_nbcgMumeabNl7i0x6zjFUVT64l47_dErosGMvBN8A3Z1InE-ma3h2lldKLeglYL1JnXKGne_quhTkf2L6MNwNd591PXfhDmI_lFcsFKcu1EG5rJyOvLBp3Ac75viu98XzHiWG7EOfUxYKFpRGv6dkDQBnk6_4uou7eJm0iNpRQx3GXPHm3g2XSOW1ncw2aQCBquMY7b6XbGSkt5_yFhn_R9GlEVy_rUP2nkO4cUd7g9JJSHnF_xsnO_3V3rLrNQdkcF6vfJ2wOPqk41yOUUmUnwTXGTzzTlrzZ6TIN90Zfudh',
'p=E2JgR8oZr6IU%3D3jJeRBx8_TpJpr04L9zjjtG1EZKfxpwiF-27bnbaerBh3pCy9_0n8XzdXxxVe3NkXx8cJd4P46RECa6qMFGWv9voNSf4NYCabsZ18L2F8HbcjmJFN6ystaB8orBvlV1wZDoH9olGFmnkb-GtBgXLScE7qPxbUiaR5wBArN0bhEaoyIyhwQ_QcqT7oBxsrJQ15Y1hXlEEQLwntAITobMZrUatwcvrbDOAxh8j6uVwFu6afcwkUPqCI4v0MDXKsIF-g4x3v34fiShP39G9QfpHd7NA6qM6amJM-fXLWMZ3P9m6TwKB0cKp37SDIhrQsKnWvJQNd4xXooGEABU5-s6Nfkmi-qyoxZcAhndOXwIj-SjOPGKGHCpbQ5oDzHwcwVkCQl-ooUr7bFnyDIgn75Cdm7tgRyGPXA6a-DYgQAfnIWh4JEvAiLHh6NR680_c9mTTzmE7KhB63EC8DT76UmMWc_--eKtAM0RED1mYwl_F8bgb1dgBxOMHwpFXedTTb7re9M_iw5PTne3Nwjcydi65u4-Z9H6_0mS6_B7ABBHp_B5QAmGAQdwM0r5g5XiFG_YI2vXJh_eXE5_2CuVkwkHrqabbbMkSvbtmMCc8yZOmmwCZBdMWnMRbe5EuueFx8sEqJkKo5HETsmmeyA1edS5k0sl7B927arF3Tgh7z3rx3PTVs20Ulazpo6fkx8wU2CMbTUhCsA8xqkMqbqknPYa0PcRkKUUzupeRb_Mk17UPbiFreYQQjbvYN3jwzMHGIUsWw4Dpe1Y_c6UDH9-bWjx4fCJf_IHeQXXvVDsanmIPWIxBINT2PaLPl4f7Iz2jQEXzDuLH27b-HoX8u6c3HBCF98tZOEdWTg_7xERF7w79GF76-8qKOmHT7EzmxIz6QdIXRr3QSPIPtz-zXtY4Hgz_7Svp30esGxY9LzpC5CFpc5ZnjVkyqSAcVbKQ4CqlMPR52xNqs-gGOTR5Tq8wumeclME7Ael1RQueV0LTeP07yyqmaWfoD9nifkVSTa0YX0BGx0S2t0xsoGcB2dZZTmEIA_cYeaz-gx7OXyD0mR1a6I6yjCRO7Vgy3wXvkfQ_jjcEH8QsReUqHbpMx1PSNgdutI3ZMUyH44LsPq-mD_HcKbsyDxzg90sU3BRIHlBHhcNv_k_u4OUynpX8qrs6pbaxxuv9nS2DJwgEqoi62SCk4f8rHQqV1bGbfHTZODuIqbGLRZ1rLrjSqKEDrFHsC-93AD6Uu11r0W5u',
'p=2CWwRj3eGxCw%3DOY4T2_YuUnc9-izH9FPdmMv938bZVytTvsg2AkMzkPgPvSveFxgfpNfUXIvylVVVOyvlmt_kHrPALc3tLO-WVzWr7FaesXWXQsTsfI8HAKSEUFl3DXRAnIOjStlD6sB8LlHvaLFFeaauQYISJYrjIwUA-J6GJwv_YgLRQ2qbDVLlfxttBa6hn2PrLZRnfg5MkFuIn0rz81DjBKBA9v35WdocSjAAFfm5d9mavvsoYY55dK5ihnVDhXgI-I8qmuCKidVL8hxP8_GQ9hFYBUpLoBrku4GhKVgdwmFKB3_kFZdnDb_cKP4QnPKD8f6bHpaoGtu8m9irBoT36sF0AkgdVQ-6sS52s1lSQv4NmfsvkjT3vcKj0LmrIMJiaYqQ8hOYdnoKBdGdYtC70SVm7-dP-VuWycalfecpvHEjSt9nNf7z3mjxaDYvueEMe9-FVP8vQHGL9TSW3w1YeAR-ZpdQr63wyugsRLocXBF1yX-Cje9k8mOBQmkU-RWadG4SCsoth-0OJO50v5TDfGl-Lgh7SzDqKd4Tfj3yQ7PGlbVvQbVBtwuTKjdrIjrJMB2uTTOYHh4rnU-2nwdmp-m9pEDqIt_lqe07XqBjtLUSZgEMGinwz1y6iIvzvm3h6lM4Nss4hJ-5CGZVxGf9Y3UsBT7WuaTb1MOnqaOIfY80DMzyjLg46SOu53RDVENt-1hb0fq6KY6zlNAoX8eMrZPDhCkkrUESXEXiXdiRrfMdljCQvyAzFjEcxJ154xQMcDUl_1AF5AskVdX4okXit8Jc_pdbfRimJ2xwr7ggCX4WL2MKfwsZ4OoNhhZ62AJ3bnMWw5yeJBHweRelFO00Wt-DEpFD2MbdA77AjWz4QkypBW2eY3sFjRqIjnReAWnZauVnkBP5vqjvGR1AO7yztipv8qCvpldq9SN8we4pF1X8MOfIxw37C2Ph9ekVHpKywUyCHRiUeNhwqLmNwiaub5cxMiDJsO8E0x4M2Cn30CNJgmQ9DSIp0w_chKAoPKyKh1mMCERXcf2gvqfrxbbRA_yOA2Vo-Mp0nswV5fFWr6FnbZtDJ6q_oejmy8w1--CkxGS3evoOIy58KNuWRN_Itwe6164FB9VO2gpkjh37_AO8jHKKfxF5h1auwCKLtwW5HZziVGUP2k80kf5VE7dluV6tvV8ZCq1Uq-B33dE9aKqiGSNRi2gCZN0W4vni4bgyUPNc3L4sULn3xhgV5EYYt4ozkJq_4tdA8llJeIpR',
'p=6XU6PBNNsHKc%3DVtos3hc8_wV0Wpx7jOCVhRUyOmJPCLrGy3L9O4-iQR_RXaPVNJjDXHpmZy_JBPrI0Kx5J7uWvjt6wuaY70wKiRyiMS0VIrwqzDIL-1w1ybKFYF56RVtQBdxQRfOItKw8MECJISo9GERuQIPgHRH9r4Z47521wBDkvTj_F9_ADCPRYR21E_MBQdReEwfoJjoUVzjD-01IoQZ7HB-q6oN0ll6Zb_ZV8ivRV9xK77Ij1xltil7dFtG6jV2ptA9VfChF69rXBn26EbiShrHbO5YtPiqVhRYrF6K1DY5YA605xC4d6J_LwIs_UYZjO4MNDQMzwVomz65yrTXHaphfr9tqX-WAlbghvkQLkfhys9eMFwZ7KpBFoHM5SgRWcQ2sJXhn0yyZJBW4YJG_ViukOmE5dVYH8kiHSoKEovF6XQhawQD7Q_oo0c_g-TznoxiJ7l1Xw0dG_r47poEqrdVfithLvWCubPoVokL07aKNTqbhJP-WXXHyHXqjgEa_pXati0mqkhIs2g_9Ck7gcgQQ02L33L4p-dx5w1bSiHLaj8jjHjj9qnBUOC8XVCb_MTqNQXkYI0aaxKE2wFpDJwzIf9OCKcugyAotgwKaElJ8E0AuFGS-NVGe4v3YdWqUVONyEkIju7EIWYePqxnKcLOLFl8As-Vptz28l5zH4UBis5AdMMeO5sdQgfGz7VbKGU8TkN7Bt9sM1TRjKgxvTOPedE_TD5QQot39IJyr2llzdsy0AwrnC4vbx8y2UKOW1t41D-A3LhB7lJX2aahoSMCfu9GfNUwPFUKPQUcvqbnvgvoSN_xIyHU0mxqKsx8ndJ9qJ8wjhGNdm6Fzs4QOTM7c-wNJDlQHwKiMV1KaFC-SP_jHbsf_i242MvZrIY8gPwDUAvx6YbA1Rf3xVJKJ-KK4cR4_R7NZmvjPMRrXY6XFx5VXi-A0BY67zJ0Qn_JZn6orEmy3FzGZlXK8TiRCTytIeh2VyPNsKAEIKU2PwOCzya3ZntF91fjeclCCceMsKvtVNX7vJScL3NwsW2AgUZ7c6LSYrDCeSU_PPqF8qE89ROeaYu47fb1BUrIpQGmbbjb4vzOSZdRBBbfoet1NNTqbZ4Ol0Psa-58O9OR6wWzHqWrGQXdEBG1w_eHvEx1oGknLMu4c4a2jGJyhTDelrngxFSrzTQwD4be-MjyAtgZIv1XJs9VCCc-gobE0GwR1xY0m6QbO7sWq2ZRbfngQtigWklxScVxdbw2_pH7-N',
'p=fUJybc31G2V0%3DUiVImOW0NxjDki1oppnnyi84FBOucMJcwuF22gs83ZSxtBb73TiU-SZMdl0t34pQYf6gjuYQTS0tEhiiwSIlk5fLGpUBDXtIU9C732OUg6KNTDYJJgRj0Im1a3gzqL6eQRqjeyHaLK5dTXwUxRRFf3bqRTs5tcgt2bVDH7Axbv5_NydB9m4X1Jex9DkLgG4ZS_JgCfrNjZkVTmOQLLPeXDtc8_RM7oehUZPtXD7lftWnO_6fdpCG-JQb963eP8jd2loKLhkzCw90ah6wlhVHt2q0iLLkNqbt7cDc7f_IduY29k1jCLH5XQ0YcGq3I8x4-3bzEeQnPdNYh7HxsBM5S_9XDQ74z2NC_2smLbaclhd4ZzI3V0BeKUMLoiWKOJbEcIbooBUNeDIO-h_le9pn57M81_PuTZbTzkPwcry1fnpU1qs1d74GrwewyXvWchC6ktZ0eJjSRjCu5QJpfckA51Uw8mqfAMkPEQuJI9CzZx753Qfqbyu4D-HdsMEvk8bQPfF6K7WEb7SKwPL6tfFoRDlBg46RNGvIwzAvgUdqFepiHJT1v5THcRwl60r25e86okk8na8dq_WqlUebWMDiKMzWMG0NhuvU9vCdkx8hLxxgCkRqoif1DFCospUq3BJsX5LRevsNpLDW9Lq5p-3D8wUYlZQEY-tE2ukj9v7ZPkS0TgRUJWQsdNUL4uq1suZAEMesMyHcme5iIEqORabMRbh_De0JTYDfqbgSZMzRF61D_PhVTF3NALsQ8ep7N0552Zqrzz7kwd5qysFnhFtjvgt8VeRx7JSIm6MjJyIYCnwFeJg6ujP2glFd74w-sdCpUiJgJU0-mtAt92R8GrKskgcf-B59qlgmzcQrTWD41ocs-PnS05v3byB_MKjIjIh1me5eYBkHsLAaIfkYtseW02jPa5F54gMpZr183L4bNC5_F2gmILVQsZfpTCc7y76eK372SlpxjQTUMriAsbVClqcVCFVTjZtplHmXtx0uv-GJwBPZFpQEd6W_QFd7QGdskUdgaqSHDkP3BLPQjG9l3-h95w4v_hTj7-M310YWNxIixMWEUxmQu3K5iVI-JJVNjCOL1i29UFomniNqVH-BKn5MsMSO2MEJEUTC4NThecrgkf23cRUnLf1Wwds1iXvh204rRJFIxIrFNUPaHAETV3Bi-RwM1Z90pIArTfYcQ24csEIZXWyHZg65rk2UpbWjrZnnAQuTI0rBI8HTNzURrctWeTMyyqv_FF',
'p=VYFg4QJ5A6eY%3DVpUK7bR_CQ50AL9Jc70lDLf5xa3KFp38qT9nbGjZ7fVgfgNA9cmdYDQmqIdypo1uA7b5rVrZt8kAHE0SOtRzxneRBEMM85WfwGNDuGFq_SD6xFGK_ionS8hIbah0QKKa5Id04OJ1GELNwswOwFY6rFVfMzh_T_Pyhih0G0wyxBAUdYKrwOIvigScuAyKZdotFW0PVCfzl-C0PXrQKziftTly18JDuMcJr5yOUW2sqyFgoSC1pTh8kQKKLjKwcu2--pZWNnlEi1cxdv5BlEMbjLb6-TolzaUK2GdXTq-Ei18dv1vEyWntsFyxu1hpb9F7Direb8eWbkS10nNfis3NSyHIJRaevQCwU6kQV_p9azz74AQ6tvHnvWdcAHRk1JuBP7DQv5LNavuSySHf4vLJMyMNfH0KfZBu_mcTFFE0LB3S5-KTb5783gDhaA-gKlG-dQM_P_mXNVH_4VII7e0uB2iD_kvqFklRFNOLsRCMvaprkpIwt0myvWiNE0xyvipB-ooMP95X3d6T87OCEYbk0vnAtW8G5eZovuiEB5arPMBnX2JqWqEFhVv-h8lq1u8mJ1iZr6BZOZqhhsinH1vGusdjZWgt4g4wx7bUjE-DQuN9nJMN07oZeIs4C1b9X-Pazjw4JRk6deiQmIgLNU7wyx7YLZcRHvLIBTAwztwzy_Dk3dI6HSVJkFNBNI8aaUCG8ZFXN6HDWNO3nyoQXrbYJAINJw9WsCR_fqYqRekBM-8uCdVrGw8Hg5KnDrAMUBEDwxLK4NRYliGLOPvEHTJqiGpnmirNxnpS6BfipH7daNT4iTS4vgVWKT45v1BSBhY7NrrUrvFMWu49qAUKkFZlHrktx6vxCiWrGNpshpZnSFIqURCXqIdZj0yH29hvPIY-_b9RflWDKuY8Y37I_d98vc2bVWiCuY3N6GdHZTMqBYblEJQg0AAGCn9RT5mJwJm0K9nnC3EvRwPbbF9yfZcBtVyAE9iRwCJ9TNSx71Mk3CxviiU8l_QF4F-o0ttudamhOx4oaCz3fx1gCiM6XWmCr7IImqBVCLnjkTMEMKBKhtNLXFi00AOZL-YMaf-L32QrJIH4y-uX9ZRDmpBpwc2Qg10l_65JBUlQCI3rqE4lOIc7T3oUD6PYrkaXJodGt_mGS0hIA3pttGE48t6XO-bmf0eJns6NF0r58I8NGK_yEfLsWSJtSg2-pXeaQNuWLINY2TWpPW_MV-4puEs5Wspr5zE6PM_AgI2n',
'p=2CWwRj3eGxCw%3DOY4T2_YuUnc9-izH9FPdmMv938bZVytTvsg2AkMzkPgPvSveFxgfpNfUXIvylVVVOyvlmt_kHrPALc3tLO-WVzWr7FaesXWXQsTsfI8HAKSEUFl3DXRAnIOjStlD6sB8LlHvaLFFeaauQYISJYrjIwUA-J6GJwv_YgLRQ2qbDVLlfxttBa6hn2PrLZRnfg5MkFuIn0rz81DjBKBA9v35WdocSjAAFfm5d9mavvsoYY55dK5ihnVDhXgI-I8qmuCKidVL8hxP8_GQ9hFYBUpLoBrku4GhKVgdwmFKB3_kFZdnDb_cKP4QnPKD8f6bHpaoGtu8m9irBoT36sF0AkgdVQ-6sS52s1lSQv4NmfsvkjT3vcKj0LmrIMJiaYqQ8hOYdnoKBdGdYtC70SVm7-dP-VuWycalfecpvHEjSt9nNf7z3mjxaDYvueEMe9-FVP8vQHGL9TSW3w1YeAR-ZpdQr63wyugsRLocXBF1yX-Cje9k8mOBQmkU-RWadG4SCsoth-0OJO50v5TDfGl-Lgh7SzDqKd4Tfj3yQ7PGlbVvQbVBtwuTKjdrIjrJMB2uTTOYHh4rnU-2nwdmp-m9pEDqIt_lqe07XqBjtLUSZgEMGinwz1y6iIvzvm3h6lM4Nss4hJ-5CGZVxGf9Y3UsBT7WuaTb1MOnqaOIfY80DMzyjLg46SOu53RDVGYLnLDDz8CehIWCL8E8VblfhIFW1skgsnoPNUygWkQVu7l67ZMUbRZJCZntWT1ynY0-eajQqTCYZcyaHnHzWl6lUNLkpFVLhuobNZsV3vmWT0-ctF9AFyEM27IOHGTpiO3722sp_Po4Sx9WiqzNcJ-F82TAM6UO8OWt2ppIlITYzADf36gywCOsIY9cbdvjMJkJI7CYU4bC4QdLs9GB5uBlaYFu-1A9aojJpSlrxGbhzdD9UEMW4WZ2QjEDEiOoxtNWMXeVQHVrsuAeKeXsW8rBdEU6YTTsisxwanyga8Q9a59lwcDI9gJqTkHASZ9rgLfSPbfKMb-Dt9aEzso_SknzigD2DsihATHYOreHO8ehJBDS57x-GTd2WFQtqA9RMGI5TcOT-zPeSsWWWJFDJZTIFSNiH5ExoyvqRywYEIAAIziq8m2P9iYqmi3WmWyWeDtwcRPwOLi1MwLNbI9uz64KLeuknAiOlJvrgtkERs-zIhAMmHJFUWmbK5ccrXL3AroL1vl0WWmY4zRmJj35vOrJGA_Z_6H5oketVrTzstCO',
'p=6XU6PBNNsHKc%3DVtos3hc8_wV0Wpx7jOCVhRUyOmJPCLrGy3L9O4-iQR_RXaPVNJjDXHpmZy_JBPrI0Kx5J7uWvjt6wuaY70wKiRyiMS0VIrwqzDIL-1w1ybKFYF56RVtQBdxQRfOItKw8MECJISo9GERuQIPgHRH9r4Z47521wBDkvTj_F9_ADCPRYR21E_MBQdReEwfoJjoUVzjD-01IoQZ7HB-q6oN0ll6Zb_ZV8ivRV9xK77Ij1xltil7dFtG6jV2ptA9VfChF69rXBn26EbiShrHbO5YtPiqVhRYrF6K1DY5YA605xC4d6J_LwIs_UYZjO4MNDQMzwVomz65yrTXHaphfr9tqX-WAlbghvkQLkfhys9eMFwZ7KpBFoHM5SgRWcQ2sJXhn0yyZJBW4YJG_ViukOmE5dVYH8kiHSoKEovF6XQhawQD7Q_oo0c_g-TznoxiJ7l1Xw0dG_r47poEqrdVfithLvWCubPoVokL07aKNTqbhJP-WXXHyHXqjgEa_pXati0mqkhIs2g_9Ck7gcgQQ02L33L4p-dx5w1bSiHLaj8jjHjj9qnBUOC8XVCb_MTqNQXkYI0aaxKE2wFpDJwzIf9OCKcugyAotgwKaElJ8E0AuFGS-NVGe4v3YdWqUVONyEkIju7EIWYePqxnKcLOLFl8As-Vptz28l5zH4UBis5AdMMeO5sdQgfGz7bJSof7LidSIPVLqfG_VnA346Usg2Zu_wTvMi2Jr9WpVChSPwZrQFGfxC9hAQuE6h_RySbWcvNn3vlTtLBpmPDGO2f1TcShTQZXpWLoAwsJAZ9aH5QJMwAO7BaQnRVFxVN9_S_TBth3AVgMr4V8zyszWN297_XOncvFc_0SZEEFT-jmDGmcjNpfBp0wkuYnNE2DH0jlkL6gcFKpQXJhRIqs88gUM5JXgz9W2IKYhmuXSJJveq4BrucxSA95WoKl-nIgt98nSTbvcQZO_pXx7gW1janBt1J4ZfoOXmzi_41dVYG23OA9YcbmdRixsMW9SmlYE1cCoOyLniNIH8Fhf4v-o3ZyD2k9kTIhq-r5-2u3XiNZWwA-oxR5xpTRNczktDwDCo4Cy35CzWON9udE63EjvTjzJ0DgU5oXsnmIBFPvmMOyWkJy639_8nN4MohuRJAvDNbp7b2fkfH6wvy3nIxiNpDAIICnU_iGr6YhkJs-uC7DqzxdfWFYHRaaRamuLhr2zrMD1Q8TM1F5Pyhv9m3LhDU_pvBzTu6d8KBMzDfo9E',
'p=7wNMsLAQgw3E%3Dh0-6Jj8on7Z0fR35QiyeqChjHjtzinhJMXzbwSaZN5bs3JPXCXuohkw7vPLA0-pH1ePEu1Wq73EGf-HXqrQDh6JUuoqfoG9Bn5dfN3fqaE8-SASoc_6vkzeZOymp9M8eU7UnpbgM7vOfgO3poZI-7xn2oKoTOYc1_nXz-hYJ3FgEJPK3lpZqbxRVfeVJhn46v7Oi-LD0r6fJIXMmoCWiVL-Ic836IJq7nDztM9il1_ET3g_e55Q-DY2YddAFoak_05bPQXvWx0WA10xVoKvEXu4_FTgZX6AQE9wfYgjzkP0c8RQavz7F_NYwVC1tNmcINLFEOsTAOsu0Snts-n3QjHY9tkoUNWDIGH5mf6G84lj7tQs4oBh5nKpbw33WbIjbLKBsqxPDChtVEjgpu8FynW1XEim1VqAqV65VcLqaxe7FTJCPJIOH3FVSlUMivFzRMEiL3LSJjq8JpWQYhdFErJcOUDt7Iuvl6MOzVestLKb9drtmGCvq11oYcnzPI0osc7Rzxm94Ibv0F3Zq-wdtfAuRcWdSrci7T_-T2cgDxd3dFUqBTfJU3XRRegaa_Hs5cj0e_ZwlBLNN-1DUrYisbR9nkSHgZAWfqNQw16QaI867DWMy345KoPeiaOgbqeJ2yGeHIzloOZ175ujIa0r03OUCaGa22O7vbJLHBnCTTUDtuygjisC39D6Y31aXH2DC-VvhK7C3XTld_uTpVX_Lhyg_nYEiqbVwWrAfKhlwnp-47Lf9_OUlWr2EumapSo8-YYV0wJPBLn4s1XT0utum_WyOn-e_gTyvdvK_MoTSiMolviw-8qAqVyKd4QIX2jmqnimtKizqhZW1wtuc5jOACbrQBlliFVvCALNYzeNWOIJ0YRdgmGAd7CtZs-szj7ZqvxbIRUME2H_6Zx41E--e24zWGgFJUCqzAEsQg3Al0ihfOe4pH-twM5aH2qhOKLwMA9vXdisBxXa24eqLLnFP59KVt9neD4y_RRTqINzEioI70nPYSgeWPYLmz2UPVH2hQLBIuoyTJyvPNXGnU3jnIMq9N3u-WYdnzNMffBadm9YSDzJg0rrsxMmf-Cj0ZMg3KZaF-DPWK0HkGkfaqEaW11yLfdIuWzXx-L-Gp4eCa2vQRA0gUQGEP0MkHWsw4VH8K9twvxh91MukuyhxlwEbd03lsAogeAqvUaw08BElXG8u_53Ou2Pagio-cZWUf2M4R7La-ViQgL6foOKN8Kzby_ErDArrwZ1nwF',
'p=KwNMsLAQgw3E%3Dh0-6Jj8on7Z0fR35QiyeqChjHjtzinhJMXzbwSaZN5bs3JPXCXuohkw7vPLA0-pH1ePEu1Wq73EGf-HXqrQDh6JUuoqfoG9Bn5dfN3fqaE8-SASoc_6vkzeZOymp9M8eU7UnpbgM7vOfgO3poZI-7xn2oKoTOYc1_nXz-hYJ3FgEJPK3lpZqbxRVfeVJhn46v7Oi-LD0r6fJIXMmoCWiVL-Ic836IJq7nDztM9il1_ET3g_e55Q-DY2YddAFoak_05bPQXvWx0WA10xVoKvEXu4_FTgZX6AQE9wfYgjzkP0c8RQavz7F_NYwVC1tNmcINLFEOsTAOsu0Snts-n3QjHY9tkoUNWDIGH5mf6G84lj7tQs4oBh5nKpbw33WbIjbLKBsqxPDChtVEjgpu8FynW1XEim1VqAqV65VcLqaxe7FTJCPJIOH3FVSlUMivFzRMEiL3LSJjq8JpWQYhdFErJcOUDt7Iuvl6MOzVestLKb9drtmGCvq11oYcnzPI0osc7Rzxm94Ibv0F3Zq-wdtfAuRcWdSrci7T_-T2cgDxd3dFUqBTfJU3XRRegaa_Hs5cj0e_ZwlBLNN-1DUrYisbR9nkSHgZAWfqNQw16QaI867DWMy345KoPeiaOgbqeJ2yGeHIzloOZ175ujIa0r03OUCaGa22O7vbJLHBnCTTUDtuygjisC39Odi07ypPo3qPVuBPZYtZFJTW94nTERE4Zb1w6DVGGVNk-K-Od6POY-8G7DFySQjvdRGelmsgiRDsVJpk9MaFltEFJycBxmGU_17mZTMFTTwLjnzwBPN0qeNIT8qrkFeR3TeOvOuR72E9u36okBtPJ_ssqIq7cRRxZCtMfOLxKvdU06xYQ5gjySaqPpTyjcz7rX1NhDs0a0DdOOADBv1g6GnOTWH6inafDp69Js7BXk_zMnE2_qvP0A6M1gIAfvI299iKUCvDtx0PJTYrWkEhPHe25NyuwIEOeDsLOxsVtVEzCZfE-FGwkq83mhM3V2hWMDajbDhnw_wOKjOYqaFMDewZJq8T7CEZR0_oX0bHW9fJgHqQUB-uYAxw9qZDD2SIVJJTmkQ0VjkEpMkrCKcOFZ_utwVs9sPR0CNDQbL9MUoik_t-GbkWouuh3EH4TEuzCprEzR1PPZ1tt6oMidOsIJU2owVJCjfZpmKE6Ezg6K2EC6XTfP4_4YeukPxLCSnyNERF2iJL41Qdk3zCa2157IXtzcPxekbhCDuvEv2wZM5UP',
'p=qXPkPrW1Kghg%3DEfRWZwWkN8iLhNZ7k5Ca7ci8hweqyV6tHuIcGkoUdzWtezcMzs7dNBvHGsgcjQLIsCKmRVi4HOxYRg8sc6Fft6Y8ilopNlwLG2FlU3NI-qboIGMLuZ_-N75rE1q-o0VGXEbz-MZv0IHoyRQv_TueZ__7T_OiQggVcJQlN8HoJN5ia7DlYDRgR77h_YOEs_daM5r9fB9s5G0KA3UtIJHU_3zWhNcxXrkfaqlNnk7jR7-n2BG7hvWXuoDzbz2Gq4Y0c4Hrzz3TPTojJ5R4aXRn4xWfZ-0MY4h9vx67Aq9UCFNbDySWGIPhcIcNxzZa8wvo5hJXsyWE71bDwEGr82vf1MSwj22SaN68X3yR5qBDUKvYKxaobWDH3KfcT5W7faAj4ObZ004TI9XoVff5JRpyBBZV6V6u35KknKr0FNgKopgjfa-FLXRs5msmmr333RbOz5lLo1c94p4NNc2LGRcF7TDxSdtSkGbBd3z4LRqtudi1BSjDwmJGPWyKNkd7hPyhbXPuc6cAhzWg37djUhP10hcfd6ZKzvDsK_aFNKzIVNkkjDH8GkFEQlAUVhkKlnCQUa_NcQ1KFLMqrHOhYOQVX4NOf5VS77pmUz48qVAiVnvMPgjOdxrJKzuNGvfaRKfdjNPcoqDzrMIBz0NllQ9-w6q70XgcVR1EXHZ1MwIblzaglwEYsFrvUBIWlIg5Xp1dGpPTWd2adBcNFURaTA6QZy3JJQbCvk23fMhiyzl4cPOVlhM-7207EPCS4vT07CUIaZierp3Q8ltvzIwM5bCmlFCtzp58J1Rly1y0-FrRIJ24f_gLvi1en61AFJuwsTbgDrdwpkYlSxamLb-S8HXzwo2NdNlVJN_E_xQMLaFsteVSpXH69n6QYB4AP-VmstsSP9bxB32bZf2V7Iqyujx_PeeVSZxcVGMMU2RlV8xzrjoGbUV_Avj2MaOo4yK4694kTAYsJcPaz7P6zmKajfnH6-xJgG5M1uChPUg8hSdflkUv30Btdx4NhaEoWNTQsAG3-bmltbRrnA9nR0izmI9HAQ5uzptVazI52abifnqA6OyzveEnV40HIURsE2ZduOEdt2iX3QDdGo5tNeXsqAadNCV9yYR7dZEi3zs8eDZILpG7U7d9IVNy915z26TMiVsUbVwqDEbZO8MByK1vZyKQE0EV5yF6W3BWahHBNbnpUw8nohoHN6nHpeN1ySTYJTwRzm8p_v5Mq1gsynUtUHNJS6oGTe_z8OmT',
'p=xCWwRj3eGxCw%3DOY4T2_YuUnc9-izH9FPdmMv938bZVytTvsg2AkMzkPgPvSveFxgfpNfUXIvylVVVOyvlmt_kHrPALc3tLO-WVzWr7FaesXWXQsTsfI8HAKSEUFl3DXRAnIOjStlD6sB8LlHvaLFFeaauQYISJYrjIwUA-J6GJwv_YgLRQ2qbDVLlfxttBa6hn2PrLZRnfg5MkFuIn0rz81DjBKBA9v35WdocSjAAFfm5d9mavvsoYY55dK5ihnVDhXgI-I8qmuCKidVL8hxP8_GQ9hFYBUpLoBrku4GhKVgdwmFKB3_kFZdnDb_cKP4QnPKD8f6bHpaoGtu8m9irBoT36sF0AkgdVQ-6sS52s1lSQv4NmfsvkjT3vcKj0LmrIMJiaYqQ8hOYdnoKBdGdYtC70SVm7-dP-VuWycalfecpvHEjSt9nNf7z3mjxaDYvueEMe9-FVP8vQHGL9TSW3w1YeAR-ZpdQr63wyugsRLocXBF1yX-Cje9k8mOBQmkU-RWadG4SCsoth-0OJO50v5TDfGl-Lgh7SzDqKd4Tfj3yQ7PGlbVvQbVBtwuTKjdrIjrJMB2uTTOYHh4rnU-2nwdmp-m9pEDqIt_lqe07XqBjtLUSZgEMGinwz1y6iIvzvm3h6lM4Nss4hJ-5CGZVxGf9Y3UsBT7WuaTb1MOnqaOIfY80DMzyjLg46SOu53RDVLljPz_6zo0JplHyE3-Xy_PZ14yylOXplSTN3eO8oiewoX0cyT5vNJ4KV_iTyBBBhHgRHsOqc0zwRitWkr4Yy_MMkwV2cky3kQozBd_InDTOMBgV-zPA68Kw7NG61nQIpcbHdYMnEJEiBeHQUNQVLODsvTDQ3VWszKYoFXnJ4O1QSoePAdjYlDm8KtzN8l2mLHdvjIa-srExR7_7Yy9aJrvOwMpSSX4U-isQpiv7j9nA7vKt4ANpILD_5kqis5YM5Cj2ZFQ8H2j2PR3gPvCmlrb5eGHgB1Y19agsPZLKTbOJh0selqo0w6n39FWq-5J-YHWh8wlQzUBrRseudU1mbIhSJSxjM_tb69eK-cRgel5T1wuw7tYj8C4LWZmzNxzMZ-hlr24S8No1WVIT2BLfc41INEdNhh9qylHNxguOsnlSA-afjxGtIs465VV24yARLznb2c7okdeMuyebfooP5mKnofk0xUwt9p2YGHKQtSiDlpkV-AKTwU4qxeTFMmsiLNVABO4m_fNEGAXNjdHLsuRKWNcFW-am4-blzdEHn7mp',
'p=CFbVGOYyXwIo%3DPsKtOYIB3Rf3xetWO7o2HOEZbrzIf5U8c9qn2Doa7KzbAWWE5xEpKLyny3wWxV4MhahlJF3O8Gh18lja73zSfD4M0IHaIiU6LeshSxIBV9dKPBxXkKccrGrok01n4iSCvkvAsLybxtcW4CJ8jH5W4W6rkl6W5yppnhziu62vCnT7SVDXcZq88DoSIPuVCxu5EMTsCwJgKTc1JnDFTFWQxTYB2Ww6FOOkuORVewl_LTtvGR2_qcr_qEcKf6JSZcDqQlOkHug7p2ASBUVGf3cfKo9DatxR83wyqZhFiedgSP7yj3xU1QcpDcf2AvWL5tI4jcnRoglKUStEKngh6B5vNZT8RRqf4IRkXFka-hFCu-kXunfRwtOJSqQbtsBQzgqdkq_2v2Z_TCW2DDkyq03HtMBmU7jJxBZuLpvb9mLB76wICIWXZAflxuTMLU2rJsg2TCYWP95LNhVHukaysYgT7c-7MiBAi3HrbJx38yutB7HWTa_b6_Gnv5zuwUU8i9BaT9XIVhmlrJg2kMjGmgu8ntsYtE9HpGQHAAXLvlMX_y3RNFAYahUaKQUNEpCCHkLT01GKMaxX733WFvy8Z0gHlMQuehmny8yuObeBWJjogjf9A4jJ1XwoqP0ZT-3HgZ5_GwjmVPXfoREu6PNfTXx4uMMErlkaVq9OFa1ljDh0dDZ77HrDe5kW2Z0rhnNakdlYRCoarP1cEI9L4wwDgid0iqBsKAt9QkiQ-Vv2XsYD2_rkW3pnOWGIy8Tp21TYFoN_Q4O5gG06w0uTBxbBTuEIaE55E9Q6cJ_BQbsxvoKK21f04aVhz_mS9Ti8zOvcqplm-cedwouIGbOmtCqCrkhdp3rb9kAONd_cUEYIy9Sa_oRAcQW7xwJWMDgWPPSyKyWMpawtH7nE1NDapcuOKsrkz6N_f3nJkLIiBPMWYhYI7ICOjxnwYGwhFtrt7sZR2A0WQcp1H5BEwW-K177D6fTk_NXhoLSa5bYa0yp3ACh8mqqFVmLbDv47QBa5CmQ58m5H1zHk2qI4jeQ0XV3-2IsNL1K3A0yikrq5YoS1yysc_VoyGZlqHBvx_Kpk3VHOYcBSBro3goR3c_XsF3T1NxeYcrR7Mx5_MLw6RpeN-XrtWFxif1iFc0E7-0Brs0SdgFJ7R0kuLMByLYCZunvPQshRQHwUwj__mGFRIsNHU6DvJHaNY7sn3fXrnZraswnuYPLH_on_X9-HZs0mELXzNDENOcPEmLSgvMBiK',
'p=pUJybc31G2V0%3DUiVImOW0NxjDki1oppnnyi84FBOucMJcwuF22gs83ZSxtBb73TiU-SZMdl0t34pQYf6gjuYQTS0tEhiiwSIlk5fLGpUBDXtIU9C732OUg6KNTDYJJgRj0Im1a3gzqL6eQRqjeyHaLK5dTXwUxRRFf3bqRTs5tcgt2bVDH7Axbv5_NydB9m4X1Jex9DkLgG4ZS_JgCfrNjZkVTmOQLLPeXDtc8_RM7oehUZPtXD7lftWnO_6fdpCG-JQb963eP8jd2loKLhkzCw90ah6wlhVHt2q0iLLkNqbt7cDc7f_IduY29k1jCLH5XQ0YcGq3I8x4-3bzEeQnPdNYh7HxsBM5S_9XDQ74z2NC_2smLbaclhd4ZzI3V0BeKUMLoiWKOJbEcIbooBUNeDIO-h_le9pn57M81_PuTZbTzkPwcry1fnpU1qs1d74GrwewyXvWchC6ktZ0eJjSRjCu5QJpfckA51Uw8mqfAMkPEQuJI9CzZx753Qfqbyu4D-HdsMEvk8bQPfF6K7WEb7SKwPL6tfFoRDlBg46RNGvIwzAvgUdqFepiHJT1v5THcRwl60r25e86okk8na8dq_WqlUebWMDiKMzWMG0NhuvU9vCdkx8hLxxgCkRqoif1DFCospUq3BJsX5LRevsNpLDW9Lq5p-3D8wUYlZQEY-tE2ukj9v7ZPkS0TgRUJWQsdAKTRaGWtkw1sTjjF_4Om1Zhj1Iz8qYa3qWehf7nANJ2D8RXZzbnXhCQf5UMuWya-HTYDJLpeglE_QBbw1bOani1sPtEpBVu98SM2dBZ79nZKQWSmHJ0k3fM0vx7mhNBqbtQVFefavednKsCOpMTVGXlDo1nsCo1-7ep_G_BkAWfcbkK_E6SAC4DFTBmVOsItCk6MGn-hOIPxtrOes9qGC-Aca6mERWYtBVUWUdXEW9BrC4HOa5-YbbQL3B_fllpfqI2FSm_ZjoW_RqYOV-9hSefmF6vd8bmK6PgzGsIBIG3A7y99H21te3CmHGqgy0nzhMFBkv0ENSRQE4J-Q9dVwOvnL28fobO4-JIEPTL0v0Cl60FffMmp5nd2-vOOTV2L6IQkJZhnnB4yHUglSj7W5VuTjBpOiQNxc9nsrKGm-XYIWfm4m9eEnoPcc8iBARLadPCqs68_ZHE0AUkjBh8DRFIC9VO4xvPCOFYtQH296sp6QzsbgX_JyIupRpSAFmUpLRRf84EHF7Gw9Mg97gn4bU_VOPWIffQu783C7ArQHBkzl',
'p=qXPkPrW1Kghg%3DEfRWZwWkN8iLhNZ7k5Ca7ci8hweqyV6tHuIcGkoUdzWtezcMzs7dNBvHGsgcjQLIsCKmRVi4HOxYRg8sc6Fft6Y8ilopNlwLG2FlU3NI-qboIGMLuZ_-N75rE1q-o0VGXEbz-MZv0IHoyRQv_TueZ__7T_OiQggVcJQlN8HoJN5ia7DlYDRgR77h_YOEs_daM5r9fB9s5G0KA3UtIJHU_3zWhNcxXrkfaqlNnk7jR7-n2BG7hvWXuoDzbz2Gq4Y0c4Hrzz3TPTojJ5R4aXRn4xWfZ-0MY4h9vx67Aq9UCFNbDySWGIPhcIcNxzZa8wvo5hJXsyWE71bDwEGr82vf1MSwj22SaN68X3yR5qBDUKvYKxaobWDH3KfcT5W7faAj4ObZ004TI9XoVff5JRpyBBZV6V6u35KknKr0FNgKopgjfa-FLXRs5msmmr333RbOz5lLo1c94p4NNc2LGRcF7TDxSdtSkGbBd3z4LRqtudi1BSjDwmJGPWyKNkd7hPyhbXPuc6cAhzWg37djUhP10hcfd6ZKzvDsK_aFNKzIVNkkjDH8GkFEQlAUVhkKlnCQUa_NcQ1KFLMqrHOhYOQVX4NOf5VS77pmUz48qVAiVnvMPgjOdxrJKzuNGvfaRKfdjNPcoqDzrMIBz0NllQ9-w6q70XgcVR1EXHZ1MwIblzaglwEYsFrvUEWSFQ0mf1X1roBzOlkQBZaLZpFa1INWmP48o-aWyQZVPgv4-sKBCnmRFyPfbJVQNCdJumNA3GWGgWVxACm6xZVoOhLuX4AcmQJcyq6ePz-EDIuYvEKkpQRRZtUbxodW876dwCW-al9p1Dshsf_-B2lP7LqW00L7dLFlcWHQJd-TQylK406eZSqB4emK0okCKcEMWDw63iWbCL9llcAvJbFRv5-LGOtnAzsthAEXT2PT4LE2PBpR81PHGqNEx26M_Yj8sv3eMIYfBNz-IW4xvT3ar4CLAZjj58cbcFJNT8a9sJqhi3DlgwJQ4y7kKPz_D80tqMVLkEr-dfqVvaHcoKlTo3Rkt-vREW0mMeLrgVf9lsyNwH63swTdqseyG2AwrtBwrIE5UTTdPSCTGQTR9JtliVdxwV4-oObghSYF7Lo7UbuTbtO0Yd_2lGYMKUqLd7cQAfwCSOAQLRxbpQndoPG1vUuYRn0PO3t0eEojXLW_Wpyz4oGvWyM-ShbmVjA2CYpBzoTFEFTzLMHtLAqeLnX_XCvNf1HppKvvO_1hltxa',
'p=NYdVi_XPUOzA%3D7ioCfKCMWbKKlsCSXIKPzBHT6nVk1x_gLvUB_3C65XwFvBVgKzH8RoUjSSguFHNAmiC2QAQljju8dBUf4iokXgbEpeN1nFAxOjQvtA-TSfaNeWlsEQm25SGs-AR4EjDRkKLI0vuRl9afOO-LK01s89fgEyLazMy0ZJ7ETlHwXNIyYalGfIp9E9NY0qLLa4Ffiq5GWgS81-WJjA_4Jl06YRc_ufoaK5gauR0Lt_kcoAktOoVR3k3U9fY_-hWrRuefCb7Vp2zGxi1jZXOWUeZB1fBWQyQmhGLrM_DtvQeVq207JEpRfyxo7Ij-eHJ8MM9gAqr9cBrTVNqcIgHu09kyFHVxcWf1ID2FW4pDC_D4szub21ac6OoafIvNQ1vXCnKcLpXcFQ101sv-RysFIsR3eRPSLDiHtUlbMGan0wHNQGPoOjpDnDOFXaJxaiKO-Vl4wCV4eczCfyCaJiWfZBoT00uJaV50AE6oklj2W7cvzrWuhPzjxLzlr1k-vsfN_PRzYj2cIHesiJkOLVv7d9mS3ak4kYZm-rF6J_jMwahRP4nnWXhzMrf67Z4PHlNDRuQ8HnTHn8D_stIkLzM5_-XGdQvKLnQlBs6h3fgqVQZpMGBA7wJ_uQ05s3G_cFEnfgTcRcvPVvawenvzkraoSL0eummwBu38_uDezroQdnc9aqnpKBmA-AjoRQLgWqDE83UHiJr2dKnzmEpGZ7MSRGFEmDh7OFBterm6C0rZV8-EVWsl4S-vlSNKRxt0AlnMnbyCeRC-2MYnaTxUZq0j8K4OF1i4rcErlAKvf5Tus0FX8b1xdrpU5vuMSQ4jL2rkvlKNcCb1cUwBgJ0CBs8gWW1FgLD_GhbewATJmaOjin91RXyYcCqomU8UCN1bLgmhnad4fvogK-ooPZpPB4BwGtH5Xma1HFKDf-jBa0W9ln3czSmHei27wZF2lCQcFYfupkytkWalE1ZbDGjBHjGOKi4FJ4uiMx8jgNmileBifLpsDdLHGxfEST8LnMZJGgDWducChVncneqTESeZ3L3SK8f0FZ_hN2XRxkK0GHFG_HIigobO33Ay8M10OpFaxhXtSEheMmzA3kxpXV8paLPjOGB3UEqtegdniJP8u-CtfGWaquOOgrXY8eZnuit-kMiQOOOP5vxqna-2EC7wSS2gdujpEnhPkBzF7qoWOHzpCfmHr9injMIONJLyWVERy7nXWY70WzdayUBhy1JfwNSch_AKa0E4VSqUmjHnSn',
'p=uFbVGOYyXwIo%3DPsKtOYIB3Rf3xetWO7o2HOEZbrzIf5U8c9qn2Doa7KzbAWWE5xEpKLyny3wWxV4MhahlJF3O8Gh18lja73zSfD4M0IHaIiU6LeshSxIBV9dKPBxXkKccrGrok01n4iSCvkvAsLybxtcW4CJ8jH5W4W6rkl6W5yppnhziu62vCnT7SVDXcZq88DoSIPuVCxu5EMTsCwJgKTc1JnDFTFWQxTYB2Ww6FOOkuORVewl_LTtvGR2_qcr_qEcKf6JSZcDqQlOkHug7p2ASBUVGf3cfKo9DatxR83wyqZhFiedgSP7yj3xU1QcpDcf2AvWL5tI4jcnRoglKUStEKngh6B5vNZT8RRqf4IRkXFka-hFCu-kXunfRwtOJSqQbtsBQzgqdkq_2v2Z_TCW2DDkyq03HtMBmU7jJxBZuLpvb9mLB76wICIWXZAflxuTMLU2rJsg2TCYWP95LNhVHukaysYgT7c-7MiBAi3HrbJx38yutB7HWTa_b6_Gnv5zuwUU8i9BaT9XIVhmlrJg2kMjGmgu8ntsYtE9HpGQHAAXLvlMX_y3RNFAYahUaKQUNEpCCHkLT01GKMaxX733WFvy8Z0gHlMQuehmny8yuObeBWJjogjf9A4jJ1XwoqP0ZT-3HgZ5_GwjmVPXfoREu6PNfTXx4uMMErlkaVq9OFa1ljDh0dDZ77HrDe5kW2ayrd1P28d8AEK7_SM7AT7jvvtQh-0GXSzMlLjrT_Vj6_qXG_prSbpxh--sTCKn9Nw1clqotuy5Kzh68G0IZfxWtRAjuyPChu0fqF0BE61lmWXQ0pDYb05-pMLmHlAAMKCuk1pqVrkO0Oad08SJYJUaTlISDc-PiV9e7kiKYT3c_6rpGl8z6vqduo4NSgXDL_rw3W0x1_S0EvNegHv13dFz6E70fGa8mYHCZdNaaXL8ONcqIzORX4XDGKeyFSdPWC9dLty_LAo589CuDIeG-Hac2DjTqf8FMaaNoKPdHv_HqO6ebEJ2emF2h8HFcC2sd0vdqnj_6wCAGH9ao6yzVVShPOZVyRMSCpbHQPOW-k2RLXoVIxaBzbxVdB_TszVHdJYG5wvQ5Vb2i0bR2AksIT1rYpGBPNcnLVhI0-ztWIdDf2RSpPwWf1z8_ySuCfGl4CcPHzZfAhDQNm1x3yNKjgWXvLBFLYgIizkGkgV3dRxX5FI_SYlbmNV6G4KIZegDQje8CKcM_iRyh5UIfMonkx-vf71UbVpTOCjZzfqtt2eU4x',
'p=bYdVi_XPUOzA%3D7ioCfKCMWbKKlsCSXIKPzBHT6nVk1x_gLvUB_3C65XwFvBVgKzH8RoUjSSguFHNAmiC2QAQljju8dBUf4iokXgbEpeN1nFAxOjQvtA-TSfaNeWlsEQm25SGs-AR4EjDRkKLI0vuRl9afOO-LK01s89fgEyLazMy0ZJ7ETlHwXNIyYalGfIp9E9NY0qLLa4Ffiq5GWgS81-WJjA_4Jl06YRc_ufoaK5gauR0Lt_kcoAktOoVR3k3U9fY_-hWrRuefCb7Vp2zGxi1jZXOWUeZB1fBWQyQmhGLrM_DtvQeVq207JEpRfyxo7Ij-eHJ8MM9gAqr9cBrTVNqcIgHu09kyFHVxcWf1ID2FW4pDC_D4szub21ac6OoafIvNQ1vXCnKcLpXcFQ101sv-RysFIsR3eRPSLDiHtUlbMGan0wHNQGPoOjpDnDOFXaJxaiKO-Vl4wCV4eczCfyCaJiWfZBoT00uJaV50AE6oklj2W7cvzrWuhPzjxLzlr1k-vsfN_PRzYj2cIHesiJkOLVv7d9mS3ak4kYZm-rF6J_jMwahRP4nnWXhzMrf67Z4PHlNDRuQ8HnTHn8D_stIkLzM5_-XGdQvKLnQlBs6h3fgqVQZpMGBA7wJ_uQ05s3G_cFEnfgTcRcvPVvawenvzkraoSL0eummwBu38_uDezroQdnc9aqnpKBmA-AjoRer4HBi8YFb2nC6_u1lWQa0Oan0gUsb2vSfcHBw6i6xKV_25dnVlK7AmETRr1LP_y3vEQM0zuPn6zSpGe2h0AcnFTTc7wQsoLrpHpSLEZCA5CzwHCkchaPSUxPCuDcCgmBk8Qw-QR0OZ_P3vBcZXYlPR4TAxkmCdpu7HLv1-wMFmOhDNDmTseI-w5IRlcQERKyJ7DMGF1aT4qMkqoEl0A9vnu2qTVWkXc1EvOQgHEQ3hax8S9H7syilMaVh2aonk4pvHH6RdLUgOYzWyWkgRpEx2X6k0UJeeBtvV2K4Ke1c0AT-XpkKSQRYlrWqWfUmrSPUtBjf0H8nizqxB_rXB8-2hUl94QtExtwkiUc5w195M2Hw8QYKobJKW3R2YqP5OEH38tmcAUwa7FeeGPNBLVAGb-f7ajtbtyFswKfeqQtOyEzP_fDvdUfEUXUIbxPmyP6AZhXfuZPg32yNCxmpAUporr6Q7q31FJUeW0AN7RYvSIHNfv5zXP8VyOAPRsFJuFw-wMBrDOWiaYBgXxaDi5oLnDPcKkprbge7aSF5lRVq1PP',

]
    timeZone =  new Date().getTimezoneOffset() / 60;
    timestamp = Date.now()+ (8+timeZone) * 60 * 60 * 1000;
    bjTime = new Date(timestamp).toLocaleString('zh',{hour12:false,timeZoneName: 'long'});
    console.log(`\n === 脚本执行 ${bjTime} ===\n`);
!(async () => {
  $.log(`您共提供${startArr.length}次浏览赚任务`)
  for (let i = 0; i < startArr.length; i++) {
    if (startArr[i]) {
      gainbody = startArr[i];
      $.index = i + 1;
      $.log(`-------------------------\n\n开始中青看点浏览赚第${$.index}次任务`)
    }
      await GainStart();
 }
   console.log(`-------------------------\n\n中青看点共完成${$.index}次任务，共计获得${gainscore}个青豆，浏览赚任务全部结束`);
   //$.msg("中青看点浏览赚", `共完成${$.index}次任务`+`  共计获得${gainscore}个青豆`);
   
   $.log(`\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n您共提供${lookArr.length}次看看赚任务\n`)
  for (let k = 0; k < lookArr.length; k++) {
    if (lookArr[k]) {
      lookbody = lookArr[k];
      $.index = k + 1;
      $.log(`-------------------------\n\n开始中青看点看看赚第${$.index}次任务`)
    }
      await lookStart();
 }
   console.log(`-------------------------\n\n中青看点共完成${$.index}次任务，共计获得${lookscore}个青豆，看看赚任务全部结束`);
   $.msg("中青看点看看赚", '共完成'+(lookArr.length+startArr.length)+'次任务，共计获得'+parseInt(lookscore+gainscore)+'个青豆');
   
   if ($.isNode()){
     //await notify.sendNotify($.name，`共完成${$.index}次任务，\n共计获得${gainscore}个青豆`
}
})()
  .catch((e) => $.logErr(e))
  .finally(() => $.done())

function GainStart() {
  return new Promise((resolve, reject) =>{
    $.post(gainHost('task/browse_start.json',gainbody), async(error, resp, data) =>{
      let startres = JSON.parse(data);
      if (startres.success == false) {
        smbody = $.getdata('youth_start').replace(gainbody+"&","");
        $.setdata(smbody,'youth_start');
        $.log(startres.message+"已自动删除")
      } else {
         comstate = startres.items.comtele_state;
      if (comstate == 0) {
        $.log("任务开始，" + startres.items.banner_id + startres.message);
        await $.wait(10000);
        await GainEnd()
      } else if (comstate == 1) {
        $.log("任务:" + startres.items.banner_id + "已完成，本次跳过");
       }
      }
      resolve()
    })
  })
}

function lookStart() {
  return new Promise((resolve, reject) =>{
    $.post(gainHost('Nameless/adlickstart.json',lookbody), async(error, resp, data) =>{
       startlk = JSON.parse(data);
      if (startlk.success == false) {
        smbody = $.getdata('youth_start').replace(lookbody+"&","");
        $.setdata(smbody,'youth_start');
        $.log(startlk.message+"已自动删除")
      } else {
         comstate = startlk.items.comtele_state;
      if (comstate == 0) {
        $.log("任务开始，" + startlk.items.banner_id + startlk.message);
       for ( let j = 0;j< startlk.items.see_num -startlk.items.read_num;j++ ){
       $.log("任务执行第"+ parseInt(j+1)+"次")
        await $.wait(8000);
        await lookstatus()
       }
        await $.wait(10000);
        await lookEnd()
      } else if (comstate == 1) {
        $.log("任务:" + startlk.items.banner_id + "已完成，本次跳过");
       }
      }
      resolve()
    })
  })
}
  
function GainEnd() {
  return new Promise((resolve, reject) =>{
    $.post(gainHost('task/browse_end.json',gainbody), (error, resp, data) =>{
      let endres = JSON.parse(data);
      if (endres.success == true) {
        $.log("任务" + endres.items.banner_id + endres.message + "，恭喜获得" + endres.items.score + "个青豆");
        gainscore += parseInt(endres.items.score)
      } else {
        $.log(endres.message)
      }
      resolve()
    })
  })
}

function lookstatus() {
  return new Promise((resolve, reject) =>{
    $.post(gainHost('Nameless/bannerstatus.json',lookbody), (error, resp, data) =>{
      let endres = JSON.parse(data);
      if (endres.success == true) {
        $.log("任务" + endres.items.banner_id +endres.message);
      } else {
        $.log(endres.message)
      }
      resolve()
    })
  })
}
function lookEnd() {
  return new Promise((resolve, reject) =>{
    $.post(gainHost('Nameless/adlickend.json',lookbody), (error, resp, data) =>{
      let endres = JSON.parse(data);
      if (endres.success == true) {
        $.log("任务" + endres.items.banner_id +endres.message+ "，" +endres.items.desc)
        lookscore += parseInt(endres.items.score)
      } else {
        $.log(endres.message)
      }
      resolve()
    })
  })
}
function gainHost(api,body) {
  return {
    url: 'https://kandian.youth.cn/v5/'+api,
  headers: {
             'access':'WIFI',
            'os-api': '26',
            'device-platform': 'android',
            'openudid': '83bcb1d7cab0195e',
            'app-version': '2.4.3',
            'Content-Type': 'application/x-www-form-urlencoded',
            'Content-Length': '1549',
            'Host': 'kandian.youth.cn',
            'Connection': 'Keep-Alive',
            'Accept-Encoding': 'gzip',
            'User-Agent': 'okhttp/3.12.2'
            },
   body: body
  }
}


function GetCookie() {
  if ($request && $request.method != 'OPTIONS' && $request.url.match(/\/browse_start\.json/)) {
     startbodyVal = $request.body;
    if (startbodys) {
      if (startbodys.indexOf(startbodyVal) > -1) {
        $.msg($.name, '阅读请求重复，本次跳过');
        return
      } else if (startbodys.indexOf(startbodyVal) == -1) {
        startbodys += "&" + startbodyVal
      }
    } else {
      startbodys = $request.body
    }
    $.setdata(startbodys, 'youth_start');
    $.log("获取浏览赚请求: " + startbodyVal);
    $.msg($.name, '获取浏览赚请求成功')
  } else if ($request && $request.method != 'OPTIONS' && $request.url.match(/\/adlickstart\.json/)) {
     seeVal = $request.body;
    if (lookbodys) {
      if (lookbodys.indexOf(seeVal) > -1) {
        $.msg($.name, '阅读请求重复，本次跳过');
        return
      } else if (lookbodys.indexOf(seeVal) == -1) {
        lookbodys += "&" + seeVal
        $.msg($.name, '获取看看赚请求'+ lookbodys.split("&").length+'成功')
      }
    } else {
      lookbodys = $request.body
      $.msg($.name, '获取看看赚请求成功')
    }
    $.setdata(lookbodys, 'youth_look');
    $.log("获取浏览赚请求: " + seeVal)
  } 
}

function Env(t,e){class s{constructor(t){this.env=t}send(t,e="GET"){t="string"==typeof t?{url:t}:t;let s=this.get;return"POST"===e&&(s=this.post),new Promise((e,i)=>{s.call(this,t,(t,s,r)=>{t?i(t):e(s)})})}get(t){return this.send.call(this.env,t)}post(t){return this.send.call(this.env,t,"POST")}}return new class{constructor(t,e){this.name=t,this.http=new s(this),this.data=null,this.dataFile="box.dat",this.logs=[],this.isMute=!1,this.isNeedRewrite=!1,this.logSeparator="\n",this.startTime=(new Date).getTime(),Object.assign(this,e),this.log("",`\ud83d\udd14${this.name}, \u5f00\u59cb!`)}isNode(){return"undefined"!=typeof module&&!!module.exports}isQuanX(){return"undefined"!=typeof $task}isSurge(){return"undefined"!=typeof $httpClient&&"undefined"==typeof $loon}isLoon(){return"undefined"!=typeof $loon}toObj(t,e=null){try{return JSON.parse(t)}catch{return e}}toStr(t,e=null){try{return JSON.stringify(t)}catch{return e}}getjson(t,e){let s=e;const i=this.getdata(t);if(i)try{s=JSON.parse(this.getdata(t))}catch{}return s}setjson(t,e){try{return this.setdata(JSON.stringify(t),e)}catch{return!1}}getScript(t){return new Promise(e=>{this.get({url:t},(t,s,i)=>e(i))})}runScript(t,e){return new Promise(s=>{let i=this.getdata("@chavy_boxjs_userCfgs.httpapi");i=i?i.replace(/\n/g,"").trim():i;let r=this.getdata("@chavy_boxjs_userCfgs.httpapi_timeout");r=r?1*r:20,r=e&&e.timeout?e.timeout:r;const[o,h]=i.split("@"),a={url:`http://${h}/v1/scripting/evaluate`,body:{script_text:t,mock_type:"cron",timeout:r},headers:{"X-Key":o,Accept:"*/*"}};this.post(a,(t,e,i)=>s(i))}).catch(t=>this.logErr(t))}loaddata(){if(!this.isNode())return{};{this.fs=this.fs?this.fs:require("fs"),this.path=this.path?this.path:require("path");const t=this.path.resolve(this.dataFile),e=this.path.resolve(process.cwd(),this.dataFile),s=this.fs.existsSync(t),i=!s&&this.fs.existsSync(e);if(!s&&!i)return{};{const i=s?t:e;try{return JSON.parse(this.fs.readFileSync(i))}catch(t){return{}}}}}writedata(){if(this.isNode()){this.fs=this.fs?this.fs:require("fs"),this.path=this.path?this.path:require("path");const t=this.path.resolve(this.dataFile),e=this.path.resolve(process.cwd(),this.dataFile),s=this.fs.existsSync(t),i=!s&&this.fs.existsSync(e),r=JSON.stringify(this.data);s?this.fs.writeFileSync(t,r):i?this.fs.writeFileSync(e,r):this.fs.writeFileSync(t,r)}}lodash_get(t,e,s){const i=e.replace(/\[(\d+)\]/g,".$1").split(".");let r=t;for(const t of i)if(r=Object(r)[t],void 0===r)return s;return r}lodash_set(t,e,s){return Object(t)!==t?t:(Array.isArray(e)||(e=e.toString().match(/[^.[\]]+/g)||[]),e.slice(0,-1).reduce((t,s,i)=>Object(t[s])===t[s]?t[s]:t[s]=Math.abs(e[i+1])>>0==+e[i+1]?[]:{},t)[e[e.length-1]]=s,t)}getdata(t){let e=this.getval(t);if(/^@/.test(t)){const[,s,i]=/^@(.*?)\.(.*?)$/.exec(t),r=s?this.getval(s):"";if(r)try{const t=JSON.parse(r);e=t?this.lodash_get(t,i,""):e}catch(t){e=""}}return e}setdata(t,e){let s=!1;if(/^@/.test(e)){const[,i,r]=/^@(.*?)\.(.*?)$/.exec(e),o=this.getval(i),h=i?"null"===o?null:o||"{}":"{}";try{const e=JSON.parse(h);this.lodash_set(e,r,t),s=this.setval(JSON.stringify(e),i)}catch(e){const o={};this.lodash_set(o,r,t),s=this.setval(JSON.stringify(o),i)}}else s=this.setval(t,e);return s}getval(t){return this.isSurge()||this.isLoon()?$persistentStore.read(t):this.isQuanX()?$prefs.valueForKey(t):this.isNode()?(this.data=this.loaddata(),this.data[t]):this.data&&this.data[t]||null}setval(t,e){return this.isSurge()||this.isLoon()?$persistentStore.write(t,e):this.isQuanX()?$prefs.setValueForKey(t,e):this.isNode()?(this.data=this.loaddata(),this.data[e]=t,this.writedata(),!0):this.data&&this.data[e]||null}initGotEnv(t){this.got=this.got?this.got:require("got"),this.cktough=this.cktough?this.cktough:require("tough-cookie"),this.ckjar=this.ckjar?this.ckjar:new this.cktough.CookieJar,t&&(t.headers=t.headers?t.headers:{},void 0===t.headers.Cookie&&void 0===t.cookieJar&&(t.cookieJar=this.ckjar))}get(t,e=(()=>{})){t.headers&&(delete t.headers["Content-Type"],delete t.headers["Content-Length"]),this.isSurge()||this.isLoon()?(this.isSurge()&&this.isNeedRewrite&&(t.headers=t.headers||{},Object.assign(t.headers,{"X-Surge-Skip-Scripting":!1})),$httpClient.get(t,(t,s,i)=>{!t&&s&&(s.body=i,s.statusCode=s.status),e(t,s,i)})):this.isQuanX()?(this.isNeedRewrite&&(t.opts=t.opts||{},Object.assign(t.opts,{hints:!1})),$task.fetch(t).then(t=>{const{statusCode:s,statusCode:i,headers:r,body:o}=t;e(null,{status:s,statusCode:i,headers:r,body:o},o)},t=>e(t))):this.isNode()&&(this.initGotEnv(t),this.got(t).on("redirect",(t,e)=>{try{if(t.headers["set-cookie"]){const s=t.headers["set-cookie"].map(this.cktough.Cookie.parse).toString();this.ckjar.setCookieSync(s,null),e.cookieJar=this.ckjar}}catch(t){this.logErr(t)}}).then(t=>{const{statusCode:s,statusCode:i,headers:r,body:o}=t;e(null,{status:s,statusCode:i,headers:r,body:o},o)},t=>{const{message:s,response:i}=t;e(s,i,i&&i.body)}))}post(t,e=(()=>{})){if(t.body&&t.headers&&!t.headers["Content-Type"]&&(t.headers["Content-Type"]="application/x-www-form-urlencoded"),t.headers&&delete t.headers["Content-Length"],this.isSurge()||this.isLoon())this.isSurge()&&this.isNeedRewrite&&(t.headers=t.headers||{},Object.assign(t.headers,{"X-Surge-Skip-Scripting":!1})),$httpClient.post(t,(t,s,i)=>{!t&&s&&(s.body=i,s.statusCode=s.status),e(t,s,i)});else if(this.isQuanX())t.method="POST",this.isNeedRewrite&&(t.opts=t.opts||{},Object.assign(t.opts,{hints:!1})),$task.fetch(t).then(t=>{const{statusCode:s,statusCode:i,headers:r,body:o}=t;e(null,{status:s,statusCode:i,headers:r,body:o},o)},t=>e(t));else if(this.isNode()){this.initGotEnv(t);const{url:s,...i}=t;this.got.post(s,i).then(t=>{const{statusCode:s,statusCode:i,headers:r,body:o}=t;e(null,{status:s,statusCode:i,headers:r,body:o},o)},t=>{const{message:s,response:i}=t;e(s,i,i&&i.body)})}}time(t){let e={"M+":(new Date).getMonth()+1,"d+":(new Date).getDate(),"H+":(new Date).getHours(),"m+":(new Date).getMinutes(),"s+":(new Date).getSeconds(),"q+":Math.floor(((new Date).getMonth()+3)/3),S:(new Date).getMilliseconds()};/(y+)/.test(t)&&(t=t.replace(RegExp.$1,((new Date).getFullYear()+"").substr(4-RegExp.$1.length)));for(let s in e)new RegExp("("+s+")").test(t)&&(t=t.replace(RegExp.$1,1==RegExp.$1.length?e[s]:("00"+e[s]).substr((""+e[s]).length)));return t}msg(e=t,s="",i="",r){const o=t=>{if(!t)return t;if("string"==typeof t)return this.isLoon()?t:this.isQuanX()?{"open-url":t}:this.isSurge()?{url:t}:void 0;if("object"==typeof t){if(this.isLoon()){let e=t.openUrl||t.url||t["open-url"],s=t.mediaUrl||t["media-url"];return{openUrl:e,mediaUrl:s}}if(this.isQuanX()){let e=t["open-url"]||t.url||t.openUrl,s=t["media-url"]||t.mediaUrl;return{"open-url":e,"media-url":s}}if(this.isSurge()){let e=t.url||t.openUrl||t["open-url"];return{url:e}}}};this.isMute||(this.isSurge()||this.isLoon()?$notification.post(e,s,i,o(r)):this.isQuanX()&&$notify(e,s,i,o(r)));let h=["","==============\ud83d\udce3\u7cfb\u7edf\u901a\u77e5\ud83d\udce3=============="];h.push(e),s&&h.push(s),i&&h.push(i),console.log(h.join("\n")),this.logs=this.logs.concat(h)}log(...t){t.length>0&&(this.logs=[...this.logs,...t]),console.log(t.join(this.logSeparator))}logErr(t,e){const s=!this.isSurge()&&!this.isQuanX()&&!this.isLoon();s?this.log("",`\u2757\ufe0f${this.name}, \u9519\u8bef!`,t.stack):this.log("",`\u2757\ufe0f${this.name}, \u9519\u8bef!`,t)}wait(t){return new Promise(e=>setTimeout(e,t))}done(t={}){const e=(new Date).getTime(),s=(e-this.startTime)/1e3;this.log("",`\ud83d\udd14${this.name}, \u7ed3\u675f! \ud83d\udd5b ${s} \u79d2`),this.log(),(this.isSurge()||this.isQuanX()||this.isLoon())&&$done(t)}}(t,e)}
